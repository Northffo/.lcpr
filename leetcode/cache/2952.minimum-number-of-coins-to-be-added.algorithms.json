{"id":3231,"fid":"2952","name":"需要添加的硬币的最小数量","slug":"minimum-number-of-coins-to-be-added","link":"https://leetcode.cn/problems/minimum-number-of-coins-to-be-added/description/","percent":50.53700677095494,"level":"Medium","category":"algorithms","en_name":"Minimum Number of Coins to be Added","cn_name":"需要添加的硬币的最小数量","totalAC":"10.8K","totalSubmit":"17.3K","likes":76,"dislikes":0,"desc":"<p>给你一个下标从 <strong>0 </strong>开始的整数数组 <code>coins</code>，表示可用的硬币的面值，以及一个整数 <code>target</code> 。</p>\n\n<p>如果存在某个 <code>coins</code> 的子序列总和为 <code>x</code>，那么整数 <code>x</code> 就是一个 <strong>可取得的金额 </strong>。</p>\n\n<p>返回需要添加到数组中的<strong> 任意面值 </strong>硬币的 <strong>最小数量 </strong>，使范围 <code>[1, target]</code> 内的每个整数都属于 <strong>可取得的金额</strong> 。</p>\n\n<p>数组的 <strong>子序列</strong> 是通过删除原始数组的一些（<strong>可能不删除</strong>）元素而形成的新的 <strong>非空</strong> 数组，删除过程不会改变剩余元素的相对位置。</p>\n\n<p>&nbsp;</p>\n\n<p><strong class=\"example\">示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>coins = [1,4,10], target = 19\n<strong>输出：</strong>2\n<strong>解释：</strong>需要添加面值为 2 和 8 的硬币各一枚，得到硬币数组 [1,2,4,8,10] 。\n可以证明从 1 到 19 的所有整数都可由数组中的硬币组合得到，且需要添加到数组中的硬币数目最小为 2 。\n</pre>\n\n<p><strong class=\"example\">示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>coins = [1,4,10,5,7,19], target = 19\n<strong>输出：</strong>1\n<strong>解释：</strong>只需要添加一枚面值为 2 的硬币，得到硬币数组 [1,2,4,5,7,10,19] 。\n可以证明从 1 到 19 的所有整数都可由数组中的硬币组合得到，且需要添加到数组中的硬币数目最小为 1 。</pre>\n\n<p><strong class=\"example\">示例 3：</strong></p>\n\n<pre>\n<strong>输入：</strong>coins = [1,1,1], target = 20\n<strong>输出：</strong>3\n<strong>解释：</strong>\n需要添加面值为 4 、8 和 16 的硬币各一枚，得到硬币数组 [1,1,1,4,8,16] 。 \n可以证明从 1 到 20 的所有整数都可由数组中的硬币组合得到，且需要添加到数组中的硬币数目最小为 3 。</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= target &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= coins.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= coins[i] &lt;= target</code></li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int minimumAddedCoins(vector<int>& coins, int target) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int minimumAddedCoins(int[] coins, int target) {\n\n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def minimumAddedCoins(self, coins, target):\n        \"\"\"\n        :type coins: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def minimumAddedCoins(self, coins: List[int], target: int) -> int:"},{"value":"c","text":"C","defaultCode":"int minimumAddedCoins(int* coins, int coinsSize, int target) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int MinimumAddedCoins(int[] coins, int target) {\n\n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[]} coins\n * @param {number} target\n * @return {number}\n */\nvar minimumAddedCoins = function(coins, target) {\n\n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function minimumAddedCoins(coins: number[], target: number): number {\n    \n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer[] $coins\n     * @param Integer $target\n     * @return Integer\n     */\n    function minimumAddedCoins($coins, $target) {\n\n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func minimumAddedCoins(_ coins: [Int], _ target: Int) -> Int {\n\n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun minimumAddedCoins(coins: IntArray, target: Int): Int {\n\n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  int minimumAddedCoins(List<int> coins, int target) {\n    \n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func minimumAddedCoins(coins []int, target int) int {\n\n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} coins\n# @param {Integer} target\n# @return {Integer}\ndef minimum_added_coins(coins, target)\n\nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def minimumAddedCoins(coins: Array[Int], target: Int): Int = {\n\n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn minimum_added_coins(coins: Vec<i32>, target: i32) -> i32 {\n\n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (minimum-added-coins coins target)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec minimum_added_coins(Coins :: [integer()], Target :: integer()) -> integer().\nminimum_added_coins(Coins, Target) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec minimum_added_coins(coins :: [integer], target :: integer) :: integer\n  def minimum_added_coins(coins, target) do\n    \n  end\nend"}],"testcase":"[1,4,10]\n19","testable":true,"templateMeta":{"name":"minimumAddedCoins","params":[{"name":"coins","type":"integer[]"},{"type":"integer","name":"target"}],"return":{"type":"integer"}}}