{"id":2694,"fid":"2644","name":"找出可整除性得分最大的整数","slug":"find-the-maximum-divisibility-score","link":"https://leetcode.cn/problems/find-the-maximum-divisibility-score/description/","percent":51.50831860564325,"level":"Easy","category":"algorithms","en_name":"Find the Maximum Divisibility Score","cn_name":"找出可整除性得分最大的整数","totalAC":"17.4K","totalSubmit":"29.6K","likes":20,"dislikes":0,"desc":"<p>给你两个下标从 <strong>0</strong> 开始的整数数组 <code>nums</code> 和 <code>divisors</code> 。</p>\n\n<p><code>divisors[i]</code> 的 <strong>可整除性得分</strong> 等于满足 <code>nums[j]</code> 能被 <code>divisors[i]</code> 整除的下标 <code>j</code> 的数量。</p>\n\n<p>返回 <strong>可整除性得分</strong> 最大的整数 <code>divisors[i]</code> 。如果有多个整数具有最大得分，则返回数值最小的一个。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>nums = [4,7,9,3,9], divisors = [5,2,3]\n<strong>输出：</strong>3\n<strong>解释：</strong>divisors 中每个元素的可整除性得分为：\ndivisors[0] 的可整除性得分为 0 ，因为 nums 中没有任何数字能被 5 整除。\ndivisors[1] 的可整除性得分为 1 ，因为 nums[0] 能被 2 整除。 \ndivisors[2] 的可整除性得分为 3 ，因为 nums[2]、nums[3] 和 nums[4] 都能被 3 整除。 \n因此，返回 divisors[2] ，它的可整除性得分最大。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>nums = [20,14,21,10], divisors = [5,7,5]\n<strong>输出：</strong>5\n<strong>解释：</strong>divisors 中每个元素的可整除性得分为：\ndivisors[0] 的可整除性得分为 2 ，因为 nums[0] 和 nums[3] 都能被 5 整除。\ndivisors[1] 的可整除性得分为 2 ，因为 nums[1] 和 nums[2] 都能被 7 整除。\ndivisors[2] 的可整除性得分为 2 ，因为 nums[0] 和 nums[3] 都能被5整除。 \n由于 divisors[0]、divisors[1] 和 divisors[2] 的可整除性得分都是最大的，因此，我们返回数值最小的一个，即 divisors[2] 。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre>\n<strong>输入：</strong>nums = [12], divisors = [10,16]\n<strong>输出：</strong>10\n<strong>解释：</strong>divisors 中每个元素的可整除性得分为：\ndivisors[0] 的可整除性得分为 0 ，因为 nums 中没有任何数字能被 10 整除。\ndivisors[1] 的可整除性得分为 0 ，因为 nums 中没有任何数字能被 16 整除。 \n由于 divisors[0] 和 divisors[1] 的可整除性得分都是最大的，因此，我们返回数值最小的一个，即 divisors[0] 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length, divisors.length &lt;= 1000</code></li>\n\t<li><code>1 &lt;= nums[i], divisors[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int maxDivScore(vector<int>& nums, vector<int>& divisors) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int maxDivScore(int[] nums, int[] divisors) {\n\n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def maxDivScore(self, nums, divisors):\n        \"\"\"\n        :type nums: List[int]\n        :type divisors: List[int]\n        :rtype: int\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def maxDivScore(self, nums: List[int], divisors: List[int]) -> int:"},{"value":"c","text":"C","defaultCode":"int maxDivScore(int* nums, int numsSize, int* divisors, int divisorsSize){\n\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int MaxDivScore(int[] nums, int[] divisors) {\n\n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[]} nums\n * @param {number[]} divisors\n * @return {number}\n */\nvar maxDivScore = function(nums, divisors) {\n\n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function maxDivScore(nums: number[], divisors: number[]): number {\n\n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer[] $divisors\n     * @return Integer\n     */\n    function maxDivScore($nums, $divisors) {\n\n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func maxDivScore(_ nums: [Int], _ divisors: [Int]) -> Int {\n\n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun maxDivScore(nums: IntArray, divisors: IntArray): Int {\n\n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  int maxDivScore(List<int> nums, List<int> divisors) {\n\n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func maxDivScore(nums []int, divisors []int) int {\n\n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} nums\n# @param {Integer[]} divisors\n# @return {Integer}\ndef max_div_score(nums, divisors)\n\nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def maxDivScore(nums: Array[Int], divisors: Array[Int]): Int = {\n\n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn max_div_score(nums: Vec<i32>, divisors: Vec<i32>) -> i32 {\n\n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (max-div-score nums divisors)\n  (-> (listof exact-integer?) (listof exact-integer?) exact-integer?)\n\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec max_div_score(Nums :: [integer()], Divisors :: [integer()]) -> integer().\nmax_div_score(Nums, Divisors) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec max_div_score(nums :: [integer], divisors :: [integer]) :: integer\n  def max_div_score(nums, divisors) do\n\n  end\nend"}],"testcase":"[4,7,9,3,9]\n[5,2,3]","testable":true,"templateMeta":{"name":"maxDivScore","params":[{"name":"nums","type":"integer[]"},{"type":"integer[]","name":"divisors"}],"return":{"type":"integer"}}}