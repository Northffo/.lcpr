{"id":816,"fid":"705","name":"设计哈希集合","slug":"design-hashset","link":"https://leetcode.cn/problems/design-hashset/description/","percent":63.49656216167193,"level":"Easy","category":"algorithms","en_name":"Design HashSet","cn_name":"设计哈希集合","totalAC":"120.7K","totalSubmit":"187.7K","likes":342,"dislikes":0,"desc":"<p>不使用任何内建的哈希表库设计一个哈希集合（HashSet）。</p>\n\n<p>实现 <code>MyHashSet</code> 类：</p>\n\n<ul>\n\t<li><code>void add(key)</code> 向哈希集合中插入值 <code>key</code> 。</li>\n\t<li><code>bool contains(key)</code> 返回哈希集合中是否存在这个值 <code>key</code> 。</li>\n\t<li><code>void remove(key)</code> 将给定值 <code>key</code> 从哈希集合中删除。如果哈希集合中没有这个值，什么也不做。</li>\n</ul>\n&nbsp;\n\n<p><strong>示例：</strong></p>\n\n<pre>\n<strong>输入：</strong>\n[\"MyHashSet\", \"add\", \"add\", \"contains\", \"contains\", \"add\", \"contains\", \"remove\", \"contains\"]\n[[], [1], [2], [1], [3], [2], [2], [2], [2]]\n<strong>输出：</strong>\n[null, null, null, true, false, null, true, null, false]\n\n<strong>解释：</strong>\nMyHashSet myHashSet = new MyHashSet();\nmyHashSet.add(1);      // set = [1]\nmyHashSet.add(2);      // set = [1, 2]\nmyHashSet.contains(1); // 返回 True\nmyHashSet.contains(3); // 返回 False ，（未找到）\nmyHashSet.add(2);      // set = [1, 2]\nmyHashSet.contains(2); // 返回 True\nmyHashSet.remove(2);   // set = [1]\nmyHashSet.contains(2); // 返回 False ，（已移除）</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= key &lt;= 10<sup>6</sup></code></li>\n\t<li>最多调用 <code>10<sup>4</sup></code> 次 <code>add</code>、<code>remove</code> 和 <code>contains</code></li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class MyHashSet {\npublic:\n    MyHashSet() {\n\n    }\n    \n    void add(int key) {\n\n    }\n    \n    void remove(int key) {\n\n    }\n    \n    bool contains(int key) {\n\n    }\n};\n\n/**\n * Your MyHashSet object will be instantiated and called as such:\n * MyHashSet* obj = new MyHashSet();\n * obj->add(key);\n * obj->remove(key);\n * bool param_3 = obj->contains(key);\n */"},{"value":"java","text":"Java","defaultCode":"class MyHashSet {\n\n    public MyHashSet() {\n\n    }\n    \n    public void add(int key) {\n\n    }\n    \n    public void remove(int key) {\n\n    }\n    \n    public boolean contains(int key) {\n\n    }\n}\n\n/**\n * Your MyHashSet object will be instantiated and called as such:\n * MyHashSet obj = new MyHashSet();\n * obj.add(key);\n * obj.remove(key);\n * boolean param_3 = obj.contains(key);\n */"},{"value":"python","text":"Python","defaultCode":"class MyHashSet(object):\n\n    def __init__(self):\n\n\n    def add(self, key):\n        \"\"\"\n        :type key: int\n        :rtype: None\n        \"\"\"\n\n\n    def remove(self, key):\n        \"\"\"\n        :type key: int\n        :rtype: None\n        \"\"\"\n\n\n    def contains(self, key):\n        \"\"\"\n        :type key: int\n        :rtype: bool\n        \"\"\"\n\n\n\n# Your MyHashSet object will be instantiated and called as such:\n# obj = MyHashSet()\n# obj.add(key)\n# obj.remove(key)\n# param_3 = obj.contains(key)"},{"value":"python3","text":"Python3","defaultCode":"class MyHashSet:\n\n    def __init__(self):\n\n\n    def add(self, key: int) -> None:\n\n\n    def remove(self, key: int) -> None:\n\n\n    def contains(self, key: int) -> bool:\n\n\n\n# Your MyHashSet object will be instantiated and called as such:\n# obj = MyHashSet()\n# obj.add(key)\n# obj.remove(key)\n# param_3 = obj.contains(key)"},{"value":"c","text":"C","defaultCode":"\n\n\ntypedef struct {\n    \n} MyHashSet;\n\n\nMyHashSet* myHashSetCreate() {\n    \n}\n\nvoid myHashSetAdd(MyHashSet* obj, int key) {\n    \n}\n\nvoid myHashSetRemove(MyHashSet* obj, int key) {\n    \n}\n\nbool myHashSetContains(MyHashSet* obj, int key) {\n    \n}\n\nvoid myHashSetFree(MyHashSet* obj) {\n    \n}\n\n/**\n * Your MyHashSet struct will be instantiated and called as such:\n * MyHashSet* obj = myHashSetCreate();\n * myHashSetAdd(obj, key);\n \n * myHashSetRemove(obj, key);\n \n * bool param_3 = myHashSetContains(obj, key);\n \n * myHashSetFree(obj);\n*/"},{"value":"csharp","text":"C#","defaultCode":"public class MyHashSet {\n\n    public MyHashSet() {\n\n    }\n    \n    public void Add(int key) {\n\n    }\n    \n    public void Remove(int key) {\n\n    }\n    \n    public bool Contains(int key) {\n\n    }\n}\n\n/**\n * Your MyHashSet object will be instantiated and called as such:\n * MyHashSet obj = new MyHashSet();\n * obj.Add(key);\n * obj.Remove(key);\n * bool param_3 = obj.Contains(key);\n */"},{"value":"javascript","text":"JavaScript","defaultCode":"\nvar MyHashSet = function() {\n\n};\n\n/** \n * @param {number} key\n * @return {void}\n */\nMyHashSet.prototype.add = function(key) {\n\n};\n\n/** \n * @param {number} key\n * @return {void}\n */\nMyHashSet.prototype.remove = function(key) {\n\n};\n\n/** \n * @param {number} key\n * @return {boolean}\n */\nMyHashSet.prototype.contains = function(key) {\n\n};\n\n/**\n * Your MyHashSet object will be instantiated and called as such:\n * var obj = new MyHashSet()\n * obj.add(key)\n * obj.remove(key)\n * var param_3 = obj.contains(key)\n */"},{"value":"typescript","text":"TypeScript","defaultCode":"class MyHashSet {\n    constructor() {\n        \n    }\n\n    add(key: number): void {\n        \n    }\n\n    remove(key: number): void {\n        \n    }\n\n    contains(key: number): boolean {\n        \n    }\n}\n\n/**\n * Your MyHashSet object will be instantiated and called as such:\n * var obj = new MyHashSet()\n * obj.add(key)\n * obj.remove(key)\n * var param_3 = obj.contains(key)\n */"},{"value":"php","text":"PHP","defaultCode":"class MyHashSet {\n    /**\n     */\n    function __construct() {\n\n    }\n\n    /**\n     * @param Integer $key\n     * @return NULL\n     */\n    function add($key) {\n\n    }\n\n    /**\n     * @param Integer $key\n     * @return NULL\n     */\n    function remove($key) {\n\n    }\n\n    /**\n     * @param Integer $key\n     * @return Boolean\n     */\n    function contains($key) {\n\n    }\n}\n\n/**\n * Your MyHashSet object will be instantiated and called as such:\n * $obj = MyHashSet();\n * $obj->add($key);\n * $obj->remove($key);\n * $ret_3 = $obj->contains($key);\n */"},{"value":"swift","text":"Swift","defaultCode":"\nclass MyHashSet {\n\n    init() {\n\n    }\n    \n    func add(_ key: Int) {\n\n    }\n    \n    func remove(_ key: Int) {\n\n    }\n    \n    func contains(_ key: Int) -> Bool {\n\n    }\n}\n\n/**\n * Your MyHashSet object will be instantiated and called as such:\n * let obj = MyHashSet()\n * obj.add(key)\n * obj.remove(key)\n * let ret_3: Bool = obj.contains(key)\n */"},{"value":"kotlin","text":"Kotlin","defaultCode":"class MyHashSet() {\n\n    fun add(key: Int) {\n\n    }\n\n    fun remove(key: Int) {\n\n    }\n\n    fun contains(key: Int): Boolean {\n\n    }\n\n}\n\n/**\n * Your MyHashSet object will be instantiated and called as such:\n * var obj = MyHashSet()\n * obj.add(key)\n * obj.remove(key)\n * var param_3 = obj.contains(key)\n */"},{"value":"dart","text":"Dart","defaultCode":"class MyHashSet {\n\n  MyHashSet() {\n    \n  }\n  \n  void add(int key) {\n    \n  }\n  \n  void remove(int key) {\n    \n  }\n  \n  bool contains(int key) {\n    \n  }\n}\n\n/**\n * Your MyHashSet object will be instantiated and called as such:\n * MyHashSet obj = MyHashSet();\n * obj.add(key);\n * obj.remove(key);\n * bool param3 = obj.contains(key);\n */"},{"value":"golang","text":"Go","defaultCode":"type MyHashSet struct {\n\n}\n\n\nfunc Constructor() MyHashSet {\n\n}\n\n\nfunc (this *MyHashSet) Add(key int)  {\n\n}\n\n\nfunc (this *MyHashSet) Remove(key int)  {\n\n}\n\n\nfunc (this *MyHashSet) Contains(key int) bool {\n\n}\n\n\n/**\n * Your MyHashSet object will be instantiated and called as such:\n * obj := Constructor();\n * obj.Add(key);\n * obj.Remove(key);\n * param_3 := obj.Contains(key);\n */"},{"value":"ruby","text":"Ruby","defaultCode":"class MyHashSet\n    def initialize()\n\n    end\n\n\n=begin\n    :type key: Integer\n    :rtype: Void\n=end\n    def add(key)\n\n    end\n\n\n=begin\n    :type key: Integer\n    :rtype: Void\n=end\n    def remove(key)\n\n    end\n\n\n=begin\n    :type key: Integer\n    :rtype: Boolean\n=end\n    def contains(key)\n\n    end\n\n\nend\n\n# Your MyHashSet object will be instantiated and called as such:\n# obj = MyHashSet.new()\n# obj.add(key)\n# obj.remove(key)\n# param_3 = obj.contains(key)"},{"value":"scala","text":"Scala","defaultCode":"class MyHashSet() {\n\n    def add(key: Int) {\n\n    }\n\n    def remove(key: Int) {\n\n    }\n\n    def contains(key: Int): Boolean = {\n\n    }\n\n}\n\n/**\n * Your MyHashSet object will be instantiated and called as such:\n * var obj = new MyHashSet()\n * obj.add(key)\n * obj.remove(key)\n * var param_3 = obj.contains(key)\n */"},{"value":"rust","text":"Rust","defaultCode":"struct MyHashSet {\n\n}\n\n\n/**\n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl MyHashSet {\n\n    fn new() -> Self {\n\n    }\n    \n    fn add(&self, key: i32) {\n\n    }\n    \n    fn remove(&self, key: i32) {\n\n    }\n    \n    fn contains(&self, key: i32) -> bool {\n\n    }\n}\n\n/**\n * Your MyHashSet object will be instantiated and called as such:\n * let obj = MyHashSet::new();\n * obj.add(key);\n * obj.remove(key);\n * let ret_3: bool = obj.contains(key);\n */"},{"value":"racket","text":"Racket","defaultCode":"(define my-hash-set%\n  (class object%\n    (super-new)\n    \n    (init-field)\n    \n    ; add : exact-integer? -> void?\n    (define/public (add key)\n      )\n    ; remove : exact-integer? -> void?\n    (define/public (remove key)\n      )\n    ; contains : exact-integer? -> boolean?\n    (define/public (contains key)\n      )))\n\n;; Your my-hash-set% object will be instantiated and called as such:\n;; (define obj (new my-hash-set%))\n;; (send obj add key)\n;; (send obj remove key)\n;; (define param_3 (send obj contains key))"},{"value":"erlang","text":"Erlang","defaultCode":"-spec my_hash_set_init_() -> any().\nmy_hash_set_init_() ->\n  .\n\n-spec my_hash_set_add(Key :: integer()) -> any().\nmy_hash_set_add(Key) ->\n  .\n\n-spec my_hash_set_remove(Key :: integer()) -> any().\nmy_hash_set_remove(Key) ->\n  .\n\n-spec my_hash_set_contains(Key :: integer()) -> boolean().\nmy_hash_set_contains(Key) ->\n  .\n\n\n%% Your functions will be called as such:\n%% my_hash_set_init_(),\n%% my_hash_set_add(Key),\n%% my_hash_set_remove(Key),\n%% Param_3 = my_hash_set_contains(Key),\n\n%% my_hash_set_init_ will be called before every test case, in which you can do some necessary initializations."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule MyHashSet do\n  @spec init_() :: any\n  def init_() do\n    \n  end\n\n  @spec add(key :: integer) :: any\n  def add(key) do\n    \n  end\n\n  @spec remove(key :: integer) :: any\n  def remove(key) do\n    \n  end\n\n  @spec contains(key :: integer) :: boolean\n  def contains(key) do\n    \n  end\nend\n\n# Your functions will be called as such:\n# MyHashSet.init_()\n# MyHashSet.add(key)\n# MyHashSet.remove(key)\n# param_3 = MyHashSet.contains(key)\n\n# MyHashSet.init_ will be called before every test case, in which you can do some necessary initializations."}],"testcase":"[\"MyHashSet\",\"add\",\"add\",\"contains\",\"contains\",\"add\",\"contains\",\"remove\",\"contains\"]\n[[],[1],[2],[1],[3],[2],[2],[2],[2]]","testable":true,"templateMeta":{"classname":"MyHashSet","constructor":{"params":[]},"methods":[{"params":[{"type":"integer","name":"key"}],"name":"add","return":{"type":"void"}},{"params":[{"type":"integer","name":"key"}],"return":{"type":"void"},"name":"remove"},{"params":[{"type":"integer","name":"key"}],"return":{"type":"boolean"},"name":"contains"}],"return":{"type":"boolean"},"systemdesign":true}}