{"id":9,"fid":"9","name":"回文数","slug":"palindrome-number","link":"https://leetcode.cn/problems/palindrome-number/description/","percent":55.95930781494812,"level":"Easy","category":"algorithms","en_name":"Palindrome Number","cn_name":"回文数","totalAC":"1.6M","totalSubmit":"2.8M","likes":2820,"dislikes":0,"desc":"<p>给你一个整数 <code>x</code> ，如果 <code>x</code> 是一个回文整数，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p>\n\n<p><span data-keyword=\"palindrome-integer\">回文数</span>是指正序（从左向右）和倒序（从右向左）读都是一样的整数。</p>\n\n<ul>\n\t<li>例如，<code>121</code> 是回文，而 <code>123</code> 不是。</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>x = 121\n<strong>输出：</strong>true\n</pre>\n\n<p><strong>示例&nbsp;2：</strong></p>\n\n<pre>\n<strong>输入：</strong>x = -121\n<strong>输出：</strong>false\n<strong>解释：</strong>从左向右读, 为 -121 。 从右向左读, 为 121- 。因此它不是一个回文数。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre>\n<strong>输入：</strong>x = 10\n<strong>输出：</strong>false\n<strong>解释：</strong>从右向左读, 为 01 。因此它不是一个回文数。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>-2<sup>31</sup>&nbsp;&lt;= x &lt;= 2<sup>31</sup>&nbsp;- 1</code></li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>进阶：</strong>你能不将整数转为字符串来解决这个问题吗？</p>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    bool isPalindrome(int x) {\n\n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public boolean isPalindrome(int x) {\n\n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def isPalindrome(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: bool\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def isPalindrome(self, x: int) -> bool:"},{"value":"c","text":"C","defaultCode":"bool isPalindrome(int x) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public bool IsPalindrome(int x) {\n\n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number} x\n * @return {boolean}\n */\nvar isPalindrome = function(x) {\n\n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function isPalindrome(x: number): boolean {\n    \n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer $x\n     * @return Boolean\n     */\n    function isPalindrome($x) {\n\n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func isPalindrome(_ x: Int) -> Bool {\n\n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun isPalindrome(x: Int): Boolean {\n\n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  bool isPalindrome(int x) {\n    \n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func isPalindrome(x int) bool {\n\n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer} x\n# @return {Boolean}\ndef is_palindrome(x)\n\nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def isPalindrome(x: Int): Boolean = {\n\n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn is_palindrome(x: i32) -> bool {\n\n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (is-palindrome x)\n  (-> exact-integer? boolean?)\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec is_palindrome(X :: integer()) -> boolean().\nis_palindrome(X) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec is_palindrome(x :: integer) :: boolean\n  def is_palindrome(x) do\n    \n  end\nend"}],"testcase":"121","testable":true,"templateMeta":{"name":"isPalindrome","params":[{"name":"x","type":"integer"}],"return":{"type":"boolean"}}}