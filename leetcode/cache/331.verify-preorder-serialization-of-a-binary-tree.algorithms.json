{"id":331,"fid":"331","name":"验证二叉树的前序序列化","slug":"verify-preorder-serialization-of-a-binary-tree","link":"https://leetcode.cn/problems/verify-preorder-serialization-of-a-binary-tree/description/","percent":48.392667777609454,"level":"Medium","category":"algorithms","en_name":"Verify Preorder Serialization of a Binary Tree","cn_name":"验证二叉树的前序序列化","totalAC":"72.1K","totalSubmit":"147.2K","likes":495,"dislikes":0,"desc":"<p>序列化二叉树的一种方法是使用 <strong>前序遍历 </strong>。当我们遇到一个非空节点时，我们可以记录下这个节点的值。如果它是一个空节点，我们可以使用一个标记值记录，例如 <code>#</code>。</p>\n\n<p><img src=\"https://assets.leetcode.com/uploads/2021/03/12/pre-tree.jpg\" /></p>\n\n<p>例如，上面的二叉树可以被序列化为字符串 <code>\"9,3,4,#,#,1,#,#,2,#,6,#,#\"</code>，其中 <code>#</code> 代表一个空节点。</p>\n\n<p>给定一串以逗号分隔的序列，验证它是否是正确的二叉树的前序序列化。编写一个在不重构树的条件下的可行算法。</p>\n\n<p><strong>保证</strong> 每个以逗号分隔的字符或为一个整数或为一个表示 <code>null</code> 指针的 <code>'#'</code> 。</p>\n\n<p>你可以认为输入格式总是有效的</p>\n\n<ul>\n\t<li>例如它永远不会包含两个连续的逗号，比如&nbsp;<code>\"1,,3\"</code> 。</li>\n</ul>\n\n<p><strong>注意：</strong>不允许重建树。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入: </strong>preorder = <code>\"9,3,4,#,#,1,#,#,2,#,6,#,#\"</code>\n<strong>输出: </strong><code>true</code></pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre>\n<strong>输入: </strong>preorder = <code>\"1,#\"</code>\n<strong>输出: </strong><code>false</code>\n</pre>\n\n<p><strong>示例 3:</strong></p>\n\n<pre>\n<strong>输入: </strong>preorder = <code>\"9,#,#,1\"</code>\n<strong>输出: </strong><code>false</code>\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= preorder.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>preorder</code>&nbsp;由以逗号&nbsp;<code>“，”</code> 分隔的 <code>[0,100]</code> 范围内的整数和 <code>“#”</code> 组成</li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    bool isValidSerialization(string preorder) {\n\n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public boolean isValidSerialization(String preorder) {\n\n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def isValidSerialization(self, preorder):\n        \"\"\"\n        :type preorder: str\n        :rtype: bool\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def isValidSerialization(self, preorder: str) -> bool:"},{"value":"c","text":"C","defaultCode":"bool isValidSerialization(char * preorder){\n\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public bool IsValidSerialization(string preorder) {\n\n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {string} preorder\n * @return {boolean}\n */\nvar isValidSerialization = function(preorder) {\n\n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function isValidSerialization(preorder: string): boolean {\n\n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param String $preorder\n     * @return Boolean\n     */\n    function isValidSerialization($preorder) {\n\n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func isValidSerialization(_ preorder: String) -> Bool {\n\n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun isValidSerialization(preorder: String): Boolean {\n\n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  bool isValidSerialization(String preorder) {\n\n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func isValidSerialization(preorder string) bool {\n\n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String} preorder\n# @return {Boolean}\ndef is_valid_serialization(preorder)\n\nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def isValidSerialization(preorder: String): Boolean = {\n\n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn is_valid_serialization(preorder: String) -> bool {\n\n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (is-valid-serialization preorder)\n  (-> string? boolean?)\n\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec is_valid_serialization(Preorder :: unicode:unicode_binary()) -> boolean().\nis_valid_serialization(Preorder) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec is_valid_serialization(preorder :: String.t) :: boolean\n  def is_valid_serialization(preorder) do\n\n  end\nend"}],"testcase":"\"9,3,4,#,#,1,#,#,2,#,6,#,#\"","testable":true,"templateMeta":{"name":"isValidSerialization","params":[{"name":"preorder","type":"string"}],"return":{"type":"boolean"}}}