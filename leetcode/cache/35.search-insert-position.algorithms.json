{"id":35,"fid":"35","name":"搜索插入位置","slug":"search-insert-position","link":"https://leetcode.cn/problems/search-insert-position/description/","percent":46.0432899575158,"level":"Easy","category":"algorithms","en_name":"Search Insert Position","cn_name":"搜索插入位置","totalAC":"1.4M","totalSubmit":"3M","likes":2289,"dislikes":0,"desc":"<p>给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。</p>\n\n<p>请必须使用时间复杂度为 <code>O(log n)</code> 的算法。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong> nums = [1,3,5,6], target = 5\n<strong>输出:</strong> 2\n</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre>\n<strong>输入:</strong> nums = [1,3,5,6], target = 2\n<strong>输出:</strong> 1\n</pre>\n\n<p><strong>示例 3:</strong></p>\n\n<pre>\n<strong>输入:</strong> nums = [1,3,5,6], target = 7\n<strong>输出:</strong> 4\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></code></li>\n\t<li><code>nums</code> 为&nbsp;<strong>无重复元素&nbsp;</strong>的&nbsp;<strong>升序&nbsp;</strong>排列数组</li>\n\t<li><code>-10<sup>4</sup> &lt;= target &lt;= 10<sup>4</sup></code></li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int searchInsert(vector<int>& nums, int target) {\n\n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int searchInsert(int[] nums, int target) {\n\n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def searchInsert(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def searchInsert(self, nums: List[int], target: int) -> int:"},{"value":"c","text":"C","defaultCode":"int searchInsert(int* nums, int numsSize, int target) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int SearchInsert(int[] nums, int target) {\n\n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number}\n */\nvar searchInsert = function(nums, target) {\n\n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function searchInsert(nums: number[], target: number): number {\n    \n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $target\n     * @return Integer\n     */\n    function searchInsert($nums, $target) {\n\n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func searchInsert(_ nums: [Int], _ target: Int) -> Int {\n\n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun searchInsert(nums: IntArray, target: Int): Int {\n\n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  int searchInsert(List<int> nums, int target) {\n    \n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func searchInsert(nums []int, target int) int {\n\n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} nums\n# @param {Integer} target\n# @return {Integer}\ndef search_insert(nums, target)\n\nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def searchInsert(nums: Array[Int], target: Int): Int = {\n\n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn search_insert(nums: Vec<i32>, target: i32) -> i32 {\n\n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (search-insert nums target)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec search_insert(Nums :: [integer()], Target :: integer()) -> integer().\nsearch_insert(Nums, Target) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec search_insert(nums :: [integer], target :: integer) :: integer\n  def search_insert(nums, target) do\n    \n  end\nend"}],"testcase":"[1,3,5,6]\n5","testable":true,"templateMeta":{"name":"searchInsert","params":[{"name":"nums","type":"integer[]"},{"name":"target","type":"integer"}],"return":{"type":"integer"}}}