{"id":2614,"fid":"2529","name":"正整数和负整数的最大计数","slug":"maximum-count-of-positive-integer-and-negative-integer","link":"https://leetcode.cn/problems/maximum-count-of-positive-integer-and-negative-integer/description/","percent":73.52788211499566,"level":"Easy","category":"algorithms","en_name":"Maximum Count of Positive Integer and Negative Integer","cn_name":"正整数和负整数的最大计数","totalAC":"28.4K","totalSubmit":"38.4K","likes":23,"dislikes":0,"desc":"<p>给你一个按 <strong>非递减顺序</strong> 排列的数组 <code>nums</code> ，返回正整数数目和负整数数目中的最大值。</p>\n\n<ul>\n\t<li>换句话讲，如果 <code>nums</code> 中正整数的数目是 <code>pos</code> ，而负整数的数目是 <code>neg</code> ，返回 <code>pos</code> 和 <code>neg</code>二者中的最大值。</li>\n</ul>\n\n<p><strong>注意：</strong><code>0</code> 既不是正整数也不是负整数。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>nums = [-2,-1,-1,1,2,3]\n<strong>输出：</strong>3\n<strong>解释：</strong>共有 3 个正整数和 3 个负整数。计数得到的最大值是 3 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>nums = [-3,-2,-1,0,0,1,2]\n<strong>输出：</strong>3\n<strong>解释：</strong>共有 2 个正整数和 3 个负整数。计数得到的最大值是 3 。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre>\n<strong>输入：</strong>nums = [5,20,66,1314]\n<strong>输出：</strong>4\n<strong>解释：</strong>共有 4 个正整数和 0 个负整数。计数得到的最大值是 4 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 2000</code></li>\n\t<li><code>-2000 &lt;= nums[i] &lt;= 2000</code></li>\n\t<li><code>nums</code> 按 <strong>非递减顺序</strong> 排列。</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>进阶：</strong>你可以设计并实现时间复杂度为 <code>O(log(n))</code> 的算法解决此问题吗？</p>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int maximumCount(vector<int>& nums) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int maximumCount(int[] nums) {\n\n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def maximumCount(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def maximumCount(self, nums: List[int]) -> int:"},{"value":"c","text":"C","defaultCode":"int maximumCount(int* nums, int numsSize) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int MaximumCount(int[] nums) {\n\n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[]} nums\n * @return {number}\n */\nvar maximumCount = function(nums) {\n\n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function maximumCount(nums: number[]): number {\n    \n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function maximumCount($nums) {\n\n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func maximumCount(_ nums: [Int]) -> Int {\n\n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun maximumCount(nums: IntArray): Int {\n\n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  int maximumCount(List<int> nums) {\n    \n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func maximumCount(nums []int) int {\n\n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} nums\n# @return {Integer}\ndef maximum_count(nums)\n    \nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def maximumCount(nums: Array[Int]): Int = {\n\n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn maximum_count(nums: Vec<i32>) -> i32 {\n\n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (maximum-count nums)\n  (-> (listof exact-integer?) exact-integer?)\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec maximum_count(Nums :: [integer()]) -> integer().\nmaximum_count(Nums) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec maximum_count(nums :: [integer]) :: integer\n  def maximum_count(nums) do\n    \n  end\nend"}],"testcase":"[-2,-1,-1,1,2,3]","testable":true,"templateMeta":{"name":"maximumCount","params":[{"name":"nums","type":"integer[]"}],"return":{"type":"integer"}}}