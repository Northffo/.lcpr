{"id":2362,"fid":"2244","name":"完成所有任务需要的最少轮数","slug":"minimum-rounds-to-complete-all-tasks","link":"https://leetcode.cn/problems/minimum-rounds-to-complete-all-tasks/description/","percent":57.42407469798335,"level":"Medium","category":"algorithms","en_name":"Minimum Rounds to Complete All Tasks","cn_name":"完成所有任务需要的最少轮数","totalAC":"25K","totalSubmit":"38.7K","likes":40,"dislikes":0,"desc":"<p>给你一个下标从 <strong>0</strong> 开始的整数数组 <code>tasks</code> ，其中 <code>tasks[i]</code> 表示任务的难度级别。在每一轮中，你可以完成 2 个或者 3 个 <strong>相同难度级别</strong> 的任务。</p>\n\n<p>返回完成所有任务需要的 <strong>最少</strong> 轮数，如果无法完成所有任务，返回<em> </em><code>-1</code><em> </em>。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>tasks = [2,2,3,3,2,4,4,4,4,4]\n<strong>输出：</strong>4\n<strong>解释：</strong>要想完成所有任务，一个可能的计划是：\n- 第一轮，完成难度级别为 2 的 3 个任务。 \n- 第二轮，完成难度级别为 3 的 2 个任务。 \n- 第三轮，完成难度级别为 4 的 3 个任务。 \n- 第四轮，完成难度级别为 4 的 2 个任务。 \n可以证明，无法在少于 4 轮的情况下完成所有任务，所以答案为 4 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>tasks = [2,3,3]\n<strong>输出：</strong>-1\n<strong>解释：</strong>难度级别为 2 的任务只有 1 个，但每一轮执行中，只能选择完成 2 个或者 3 个相同难度级别的任务。因此，无法完成所有任务，答案为 -1 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= tasks.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= tasks[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int minimumRounds(vector<int>& tasks) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int minimumRounds(int[] tasks) {\n\n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def minimumRounds(self, tasks):\n        \"\"\"\n        :type tasks: List[int]\n        :rtype: int\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def minimumRounds(self, tasks: List[int]) -> int:"},{"value":"c","text":"C","defaultCode":"\n\nint minimumRounds(int* tasks, int tasksSize){\n\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int MinimumRounds(int[] tasks) {\n\n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[]} tasks\n * @return {number}\n */\nvar minimumRounds = function(tasks) {\n\n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function minimumRounds(tasks: number[]): number {\n\n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer[] $tasks\n     * @return Integer\n     */\n    function minimumRounds($tasks) {\n\n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func minimumRounds(_ tasks: [Int]) -> Int {\n\n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun minimumRounds(tasks: IntArray): Int {\n\n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  int minimumRounds(List<int> tasks) {\n\n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func minimumRounds(tasks []int) int {\n\n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} tasks\n# @return {Integer}\ndef minimum_rounds(tasks)\n\nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def minimumRounds(tasks: Array[Int]): Int = {\n\n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn minimum_rounds(tasks: Vec<i32>) -> i32 {\n\n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (minimum-rounds tasks)\n  (-> (listof exact-integer?) exact-integer?)\n\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec minimum_rounds(Tasks :: [integer()]) -> integer().\nminimum_rounds(Tasks) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec minimum_rounds(tasks :: [integer]) :: integer\n  def minimum_rounds(tasks) do\n\n  end\nend"}],"testcase":"[2,2,3,3,2,4,4,4,4,4]","testable":true,"templateMeta":{"name":"minimumRounds","params":[{"name":"tasks","type":"integer[]"}],"return":{"type":"integer"}}}