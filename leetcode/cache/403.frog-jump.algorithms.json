{"id":403,"fid":"403","name":"青蛙过河","slug":"frog-jump","link":"https://leetcode.cn/problems/frog-jump/description/","percent":46.1304944194175,"level":"Hard","category":"algorithms","en_name":"Frog Jump","cn_name":"青蛙过河","totalAC":"66.3K","totalSubmit":"143.6K","likes":540,"dislikes":0,"desc":"<p>一只青蛙想要过河。 假定河流被等分为若干个单元格，并且在每一个单元格内都有可能放有一块石子（也有可能没有）。 青蛙可以跳上石子，但是不可以跳入水中。</p>\n\n<p>给你石子的位置列表 <code>stones</code>（用单元格序号 <strong>升序</strong> 表示），&nbsp;请判定青蛙能否成功过河（即能否在最后一步跳至最后一块石子上）。开始时，&nbsp;青蛙默认已站在第一块石子上，并可以假定它第一步只能跳跃 <code>1</code> 个单位（即只能从单元格 1 跳至单元格 2 ）。</p>\n\n<p>如果青蛙上一步跳跃了&nbsp;<code>k</code><em>&nbsp;</em>个单位，那么它接下来的跳跃距离只能选择为&nbsp;<code>k - 1</code>、<code>k</code><em>&nbsp;</em>或&nbsp;<code>k + 1</code> 个单位。&nbsp;另请注意，青蛙只能向前方（终点的方向）跳跃。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>stones = [0,1,3,5,6,8,12,17]\n<strong>输出：</strong>true\n<strong>解释：</strong>青蛙可以成功过河，按照如下方案跳跃：跳 1 个单位到第 2 块石子, 然后跳 2 个单位到第 3 块石子, 接着 跳 2 个单位到第 4 块石子, 然后跳 3 个单位到第 6 块石子, 跳 4 个单位到第 7 块石子, 最后，跳 5 个单位到第 8 个石子（即最后一块石子）。</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>stones = [0,1,2,3,4,8,9,11]\n<strong>输出：</strong>false\n<strong>解释：</strong>这是因为第 5 和第 6 个石子之间的间距太大，没有可选的方案供青蛙跳跃过去。</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= stones.length &lt;= 2000</code></li>\n\t<li><code>0 &lt;= stones[i] &lt;= 2<sup>31</sup> - 1</code></li>\n\t<li><code>stones[0] == 0</code></li>\n\t<li><code>stones</code>&nbsp;按严格升序排列</li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    bool canCross(vector<int>& stones) {\n\n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public boolean canCross(int[] stones) {\n\n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def canCross(self, stones):\n        \"\"\"\n        :type stones: List[int]\n        :rtype: bool\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def canCross(self, stones: List[int]) -> bool:"},{"value":"c","text":"C","defaultCode":"bool canCross(int* stones, int stonesSize) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public bool CanCross(int[] stones) {\n\n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[]} stones\n * @return {boolean}\n */\nvar canCross = function(stones) {\n\n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function canCross(stones: number[]): boolean {\n    \n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer[] $stones\n     * @return Boolean\n     */\n    function canCross($stones) {\n\n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func canCross(_ stones: [Int]) -> Bool {\n\n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun canCross(stones: IntArray): Boolean {\n\n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  bool canCross(List<int> stones) {\n    \n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func canCross(stones []int) bool {\n\n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} stones\n# @return {Boolean}\ndef can_cross(stones)\n    \nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def canCross(stones: Array[Int]): Boolean = {\n\n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn can_cross(stones: Vec<i32>) -> bool {\n\n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (can-cross stones)\n  (-> (listof exact-integer?) boolean?)\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec can_cross(Stones :: [integer()]) -> boolean().\ncan_cross(Stones) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec can_cross(stones :: [integer]) :: boolean\n  def can_cross(stones) do\n    \n  end\nend"}],"testcase":"[0,1,3,5,6,8,12,17]","testable":true,"templateMeta":{"name":"canCross","params":[{"name":"stones","type":"integer[]"}],"return":{"type":"boolean"}}}