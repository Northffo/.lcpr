{"id":419,"fid":"419","name":"甲板上的战舰","slug":"battleships-in-a-board","link":"https://leetcode.cn/problems/battleships-in-a-board/description/","percent":77.76233495482974,"level":"Medium","category":"algorithms","en_name":"Battleships in a Board","cn_name":"甲板上的战舰","totalAC":"60.3K","totalSubmit":"76.8K","likes":286,"dislikes":0,"desc":"<p>给你一个大小为 <code>m x n</code> 的矩阵 <code>board</code> 表示甲板，其中，每个单元格可以是一艘战舰 <code>'X'</code> 或者是一个空位 <code>'.'</code> ，返回在甲板 <code>board</code> 上放置的 <strong>战舰</strong> 的数量。</p>\n\n<p><strong>战舰</strong> 只能水平或者垂直放置在 <code>board</code> 上。换句话说，战舰只能按 <code>1 x k</code>（<code>1</code> 行，<code>k</code> 列）或 <code>k x 1</code>（<code>k</code> 行，<code>1</code> 列）的形状建造，其中 <code>k</code> 可以是任意大小。两艘战舰之间至少有一个水平或垂直的空位分隔 （即没有相邻的战舰）。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/04/10/battelship-grid.jpg\" style=\"width: 333px; height: 333px;\" />\n<pre>\n<strong>输入：</strong>board = [[\"X\",\".\",\".\",\"X\"],[\".\",\".\",\".\",\"X\"],[\".\",\".\",\".\",\"X\"]]\n<strong>输出：</strong>2\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>board = [[\".\"]]\n<strong>输出：</strong>0\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>m == board.length</code></li>\n\t<li><code>n == board[i].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 200</code></li>\n\t<li><code>board[i][j]</code> 是 <code>'.'</code> 或 <code>'X'</code></li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>进阶：</strong>你可以实现一次扫描算法，并只使用<strong> </strong><code>O(1)</code><strong> </strong>额外空间，并且不修改 <code>board</code> 的值来解决这个问题吗？</p>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int countBattleships(vector<vector<char>>& board) {\n\n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int countBattleships(char[][] board) {\n\n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def countBattleships(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: int\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def countBattleships(self, board: List[List[str]]) -> int:"},{"value":"c","text":"C","defaultCode":"\n\nint countBattleships(char** board, int boardSize, int* boardColSize){\n\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int CountBattleships(char[][] board) {\n\n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {character[][]} board\n * @return {number}\n */\nvar countBattleships = function(board) {\n\n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function countBattleships(board: string[][]): number {\n\n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param String[][] $board\n     * @return Integer\n     */\n    function countBattleships($board) {\n\n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func countBattleships(_ board: [[Character]]) -> Int {\n\n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun countBattleships(board: Array<CharArray>): Int {\n\n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  int countBattleships(List<List<String>> board) {\n\n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func countBattleships(board [][]byte) int {\n\n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Character[][]} board\n# @return {Integer}\ndef count_battleships(board)\n\nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def countBattleships(board: Array[Array[Char]]): Int = {\n\n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn count_battleships(board: Vec<Vec<char>>) -> i32 {\n\n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (count-battleships board)\n  (-> (listof (listof char?)) exact-integer?)\n\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec count_battleships(Board :: [[char()]]) -> integer().\ncount_battleships(Board) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec count_battleships(board :: [[char]]) :: integer\n  def count_battleships(board) do\n\n  end\nend"}],"testcase":"[[\"X\",\".\",\".\",\"X\"],[\".\",\".\",\".\",\"X\"],[\".\",\".\",\".\",\"X\"]]","testable":true,"templateMeta":{"name":"countBattleships","params":[{"name":"board","type":"character[][]"}],"return":{"type":"integer"}}}