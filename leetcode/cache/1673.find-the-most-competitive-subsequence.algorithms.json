{"id":1792,"fid":"1673","name":"找出最具竞争力的子序列","slug":"find-the-most-competitive-subsequence","link":"https://leetcode.cn/problems/find-the-most-competitive-subsequence/description/","percent":40.82942858881519,"level":"Medium","category":"algorithms","en_name":"Find the Most Competitive Subsequence","cn_name":"找出最具竞争力的子序列","totalAC":"21.7K","totalSubmit":"46.6K","likes":156,"dislikes":0,"desc":"<p>给你一个整数数组 <code>nums</code> 和一个正整数 <code>k</code> ，返回长度为 <code>k</code> 且最具 <strong>竞争力</strong> 的<em> </em><code>nums</code> 子序列。</p>\n\n<p>数组的子序列是从数组中删除一些元素（可能不删除元素）得到的序列。</p>\n\n<p>在子序列 <code>a</code> 和子序列 <code>b</code> 第一个不相同的位置上，如果 <code>a</code> 中的数字小于 <code>b</code> 中对应的数字，那么我们称子序列 <code>a</code> 比子序列 <code>b</code>（相同长度下）更具 <strong>竞争力</strong> 。 例如，<code>[1,3,4]</code> 比 <code>[1,3,5]</code> 更具竞争力，在第一个不相同的位置，也就是最后一个位置上， <code>4</code> 小于 <code>5</code> 。</p>\n\n<p> </p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>nums = [3,5,2,6], k = 2\n<strong>输出：</strong>[2,6]\n<strong>解释：</strong>在所有可能的子序列集合 {[3,5], [3,2], [3,6], [5,2], [5,6], [2,6]} 中，[2,6] 最具竞争力。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>nums = [2,4,3,3,5,4,9,6], k = 4\n<strong>输出：</strong>[2,3,3,4]\n</pre>\n\n<p> </p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 <= nums.length <= 10<sup>5</sup></code></li>\n\t<li><code>0 <= nums[i] <= 10<sup>9</sup></code></li>\n\t<li><code>1 <= k <= nums.length</code></li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    vector<int> mostCompetitive(vector<int>& nums, int k) {\n\n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int[] mostCompetitive(int[] nums, int k) {\n\n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def mostCompetitive(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def mostCompetitive(self, nums: List[int], k: int) -> List[int]:"},{"value":"c","text":"C","defaultCode":"/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* mostCompetitive(int* nums, int numsSize, int k, int* returnSize) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int[] MostCompetitive(int[] nums, int k) {\n\n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number[]}\n */\nvar mostCompetitive = function(nums, k) {\n\n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function mostCompetitive(nums: number[], k: number): number[] {\n    \n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer[]\n     */\n    function mostCompetitive($nums, $k) {\n\n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func mostCompetitive(_ nums: [Int], _ k: Int) -> [Int] {\n\n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun mostCompetitive(nums: IntArray, k: Int): IntArray {\n\n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  List<int> mostCompetitive(List<int> nums, int k) {\n    \n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func mostCompetitive(nums []int, k int) []int {\n\n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer[]}\ndef most_competitive(nums, k)\n\nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def mostCompetitive(nums: Array[Int], k: Int): Array[Int] = {\n\n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn most_competitive(nums: Vec<i32>, k: i32) -> Vec<i32> {\n\n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (most-competitive nums k)\n  (-> (listof exact-integer?) exact-integer? (listof exact-integer?))\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec most_competitive(Nums :: [integer()], K :: integer()) -> [integer()].\nmost_competitive(Nums, K) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec most_competitive(nums :: [integer], k :: integer) :: [integer]\n  def most_competitive(nums, k) do\n    \n  end\nend"}],"testcase":"[3,5,2,6]\n2","testable":true,"templateMeta":{"name":"mostCompetitive","params":[{"name":"nums","type":"integer[]"},{"type":"integer","name":"k"}],"return":{"type":"integer[]"}}}