{"id":3165,"fid":"2903","name":"找出满足差值条件的下标 I","slug":"find-indices-with-index-and-value-difference-i","link":"https://leetcode.cn/problems/find-indices-with-index-and-value-difference-i/description/","percent":70.02450056539766,"level":"Easy","category":"algorithms","en_name":"Find Indices With Index and Value Difference I","cn_name":"找出满足差值条件的下标 I","totalAC":"17.2K","totalSubmit":"23.5K","likes":22,"dislikes":0,"desc":"<p>给你一个下标从 <strong>0</strong> 开始、长度为 <code>n</code> 的整数数组 <code>nums</code> ，以及整数 <code>indexDifference</code> 和整数 <code>valueDifference</code> 。</p>\n\n<p>你的任务是从范围 <code>[0, n - 1]</code> 内找出&nbsp; <strong>2</strong> 个满足下述所有条件的下标 <code>i</code> 和 <code>j</code> ：</p>\n\n<ul>\n\t<li><code>abs(i - j) &gt;= indexDifference</code> 且</li>\n\t<li><code>abs(nums[i] - nums[j]) &gt;= valueDifference</code></li>\n</ul>\n\n<p>返回整数数组 <code>answer</code>。如果存在满足题目要求的两个下标，则 <code>answer = [i, j]</code> ；否则，<code>answer = [-1, -1]</code> 。如果存在多组可供选择的下标对，只需要返回其中任意一组即可。</p>\n\n<p><strong>注意：</strong><code>i</code> 和 <code>j</code> 可能 <strong>相等</strong> 。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>nums = [5,1,4,1], indexDifference = 2, valueDifference = 4\n<strong>输出：</strong>[0,3]\n<strong>解释：</strong>在示例中，可以选择 i = 0 和 j = 3 。\nabs(0 - 3) &gt;= 2 且 abs(nums[0] - nums[3]) &gt;= 4 。\n因此，[0,3] 是一个符合题目要求的答案。\n[3,0] 也是符合题目要求的答案。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>nums = [2,1], indexDifference = 0, valueDifference = 0\n<strong>输出：</strong>[0,0]\n<strong>解释：</strong>\n在示例中，可以选择 i = 0 和 j = 0 。 \nabs(0 - 0) &gt;= 0 且 abs(nums[0] - nums[0]) &gt;= 0 。 \n因此，[0,0] 是一个符合题目要求的答案。 \n[0,1]、[1,0] 和 [1,1] 也是符合题目要求的答案。 \n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre>\n<strong>输入：</strong>nums = [1,2,3], indexDifference = 2, valueDifference = 4\n<strong>输出：</strong>[-1,-1]\n<strong>解释：</strong>在示例中，可以证明无法找出 2 个满足所有条件的下标。\n因此，返回 [-1,-1] 。</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n == nums.length &lt;= 100</code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 50</code></li>\n\t<li><code>0 &lt;= indexDifference &lt;= 100</code></li>\n\t<li><code>0 &lt;= valueDifference &lt;= 50</code></li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    vector<int> findIndices(vector<int>& nums, int indexDifference, int valueDifference) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int[] findIndices(int[] nums, int indexDifference, int valueDifference) {\n\n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def findIndices(self, nums, indexDifference, valueDifference):\n        \"\"\"\n        :type nums: List[int]\n        :type indexDifference: int\n        :type valueDifference: int\n        :rtype: List[int]\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def findIndices(self, nums: List[int], indexDifference: int, valueDifference: int) -> List[int]:"},{"value":"c","text":"C","defaultCode":"/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* findIndices(int* nums, int numsSize, int indexDifference, int valueDifference, int* returnSize) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int[] FindIndices(int[] nums, int indexDifference, int valueDifference) {\n\n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[]} nums\n * @param {number} indexDifference\n * @param {number} valueDifference\n * @return {number[]}\n */\nvar findIndices = function(nums, indexDifference, valueDifference) {\n\n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function findIndices(nums: number[], indexDifference: number, valueDifference: number): number[] {\n    \n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $indexDifference\n     * @param Integer $valueDifference\n     * @return Integer[]\n     */\n    function findIndices($nums, $indexDifference, $valueDifference) {\n\n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func findIndices(_ nums: [Int], _ indexDifference: Int, _ valueDifference: Int) -> [Int] {\n\n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun findIndices(nums: IntArray, indexDifference: Int, valueDifference: Int): IntArray {\n\n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  List<int> findIndices(List<int> nums, int indexDifference, int valueDifference) {\n    \n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func findIndices(nums []int, indexDifference int, valueDifference int) []int {\n\n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} nums\n# @param {Integer} index_difference\n# @param {Integer} value_difference\n# @return {Integer[]}\ndef find_indices(nums, index_difference, value_difference)\n    \nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def findIndices(nums: Array[Int], indexDifference: Int, valueDifference: Int): Array[Int] = {\n        \n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn find_indices(nums: Vec<i32>, index_difference: i32, value_difference: i32) -> Vec<i32> {\n\n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (find-indices nums indexDifference valueDifference)\n  (-> (listof exact-integer?) exact-integer? exact-integer? (listof exact-integer?))\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec find_indices(Nums :: [integer()], IndexDifference :: integer(), ValueDifference :: integer()) -> [integer()].\nfind_indices(Nums, IndexDifference, ValueDifference) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec find_indices(nums :: [integer], index_difference :: integer, value_difference :: integer) :: [integer]\n  def find_indices(nums, index_difference, value_difference) do\n    \n  end\nend"}],"testcase":"[5,1,4,1]\n2\n4","testable":true,"templateMeta":{"name":"findIndices","params":[{"name":"nums","type":"integer[]"},{"type":"integer","name":"indexDifference"},{"type":"integer","name":"valueDifference"}],"return":{"type":"integer[]"}}}