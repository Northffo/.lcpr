{"id":1296,"fid":"1483","name":"树节点的第 K 个祖先","slug":"kth-ancestor-of-a-tree-node","link":"https://leetcode.cn/problems/kth-ancestor-of-a-tree-node/description/","percent":46.28876599436131,"level":"Hard","category":"algorithms","en_name":"Kth Ancestor of a Tree Node","cn_name":"树节点的第 K 个祖先","totalAC":"22.4K","totalSubmit":"46.8K","likes":251,"dislikes":0,"desc":"<p>给你一棵树，树上有 <code>n</code> 个节点，按从 <code>0</code> 到 <code>n-1</code> 编号。树以父节点数组的形式给出，其中 <code>parent[i]</code> 是节点 <code>i</code> 的父节点。树的根节点是编号为 <code>0</code> 的节点。</p>\n\n<p>树节点的第 <em><code>k</code> </em>个祖先节点是从该节点到根节点路径上的第 <code>k</code> 个节点。</p>\n\n<p>实现 <code>TreeAncestor</code> 类：</p>\n\n<ul>\n\t<li><code>TreeAncestor（int n， int[] parent）</code> 对树和父数组中的节点数初始化对象。</li>\n\t<li><code>getKthAncestor</code><code>(int node, int k)</code> 返回节点 <code>node</code> 的第 <code>k</code> 个祖先节点。如果不存在这样的祖先节点，返回 <code>-1</code>&nbsp;。</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<p><strong><img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/06/14/1528_ex1.png\" /></strong></p>\n\n<pre>\n<strong>输入：</strong>\n[\"TreeAncestor\",\"getKthAncestor\",\"getKthAncestor\",\"getKthAncestor\"]\n[[7,[-1,0,0,1,1,2,2]],[3,1],[5,2],[6,3]]\n\n<strong>输出：</strong>\n[null,1,0,-1]\n\n<strong>解释：</strong>\nTreeAncestor treeAncestor = new TreeAncestor(7, [-1, 0, 0, 1, 1, 2, 2]);\n\ntreeAncestor.getKthAncestor(3, 1);  // 返回 1 ，它是 3 的父节点\ntreeAncestor.getKthAncestor(5, 2);  // 返回 0 ，它是 5 的祖父节点\ntreeAncestor.getKthAncestor(6, 3);  // 返回 -1 因为不存在满足要求的祖先节点\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= k &lt;= n &lt;= 5 * 10<sup>4</sup></code></li>\n\t<li><code>parent[0] == -1</code> 表示编号为 <code>0</code> 的节点是根节点。</li>\n\t<li>对于所有的 <code>0 &lt;&nbsp;i &lt; n</code> ，<code>0 &lt;= parent[i] &lt; n</code> 总成立</li>\n\t<li><code>0 &lt;= node &lt; n</code></li>\n\t<li>至多查询&nbsp;<code>5 * 10<sup>4</sup></code> 次</li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class TreeAncestor {\npublic:\n    TreeAncestor(int n, vector<int>& parent) {\n\n    }\n    \n    int getKthAncestor(int node, int k) {\n\n    }\n};\n\n/**\n * Your TreeAncestor object will be instantiated and called as such:\n * TreeAncestor* obj = new TreeAncestor(n, parent);\n * int param_1 = obj->getKthAncestor(node,k);\n */"},{"value":"java","text":"Java","defaultCode":"class TreeAncestor {\n\n    public TreeAncestor(int n, int[] parent) {\n\n    }\n    \n    public int getKthAncestor(int node, int k) {\n\n    }\n}\n\n/**\n * Your TreeAncestor object will be instantiated and called as such:\n * TreeAncestor obj = new TreeAncestor(n, parent);\n * int param_1 = obj.getKthAncestor(node,k);\n */"},{"value":"python","text":"Python","defaultCode":"class TreeAncestor(object):\n\n    def __init__(self, n, parent):\n        \"\"\"\n        :type n: int\n        :type parent: List[int]\n        \"\"\"\n\n\n    def getKthAncestor(self, node, k):\n        \"\"\"\n        :type node: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n\n\n\n# Your TreeAncestor object will be instantiated and called as such:\n# obj = TreeAncestor(n, parent)\n# param_1 = obj.getKthAncestor(node,k)"},{"value":"python3","text":"Python3","defaultCode":"class TreeAncestor:\n\n    def __init__(self, n: int, parent: List[int]):\n\n\n    def getKthAncestor(self, node: int, k: int) -> int:\n\n\n\n# Your TreeAncestor object will be instantiated and called as such:\n# obj = TreeAncestor(n, parent)\n# param_1 = obj.getKthAncestor(node,k)"},{"value":"c","text":"C","defaultCode":"\n\n\ntypedef struct {\n    \n} TreeAncestor;\n\n\nTreeAncestor* treeAncestorCreate(int n, int* parent, int parentSize) {\n    \n}\n\nint treeAncestorGetKthAncestor(TreeAncestor* obj, int node, int k) {\n    \n}\n\nvoid treeAncestorFree(TreeAncestor* obj) {\n    \n}\n\n/**\n * Your TreeAncestor struct will be instantiated and called as such:\n * TreeAncestor* obj = treeAncestorCreate(n, parent, parentSize);\n * int param_1 = treeAncestorGetKthAncestor(obj, node, k);\n \n * treeAncestorFree(obj);\n*/"},{"value":"csharp","text":"C#","defaultCode":"public class TreeAncestor {\n\n    public TreeAncestor(int n, int[] parent) {\n\n    }\n    \n    public int GetKthAncestor(int node, int k) {\n\n    }\n}\n\n/**\n * Your TreeAncestor object will be instantiated and called as such:\n * TreeAncestor obj = new TreeAncestor(n, parent);\n * int param_1 = obj.GetKthAncestor(node,k);\n */"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number} n\n * @param {number[]} parent\n */\nvar TreeAncestor = function(n, parent) {\n\n};\n\n/** \n * @param {number} node \n * @param {number} k\n * @return {number}\n */\nTreeAncestor.prototype.getKthAncestor = function(node, k) {\n\n};\n\n/**\n * Your TreeAncestor object will be instantiated and called as such:\n * var obj = new TreeAncestor(n, parent)\n * var param_1 = obj.getKthAncestor(node,k)\n */"},{"value":"typescript","text":"TypeScript","defaultCode":"class TreeAncestor {\n    constructor(n: number, parent: number[]) {\n        \n    }\n\n    getKthAncestor(node: number, k: number): number {\n        \n    }\n}\n\n/**\n * Your TreeAncestor object will be instantiated and called as such:\n * var obj = new TreeAncestor(n, parent)\n * var param_1 = obj.getKthAncestor(node,k)\n */"},{"value":"php","text":"PHP","defaultCode":"class TreeAncestor {\n    /**\n     * @param Integer $n\n     * @param Integer[] $parent\n     */\n    function __construct($n, $parent) {\n\n    }\n\n    /**\n     * @param Integer $node\n     * @param Integer $k\n     * @return Integer\n     */\n    function getKthAncestor($node, $k) {\n\n    }\n}\n\n/**\n * Your TreeAncestor object will be instantiated and called as such:\n * $obj = TreeAncestor($n, $parent);\n * $ret_1 = $obj->getKthAncestor($node, $k);\n */"},{"value":"swift","text":"Swift","defaultCode":"\nclass TreeAncestor {\n\n    init(_ n: Int, _ parent: [Int]) {\n\n    }\n    \n    func getKthAncestor(_ node: Int, _ k: Int) -> Int {\n\n    }\n}\n\n/**\n * Your TreeAncestor object will be instantiated and called as such:\n * let obj = TreeAncestor(n, parent)\n * let ret_1: Int = obj.getKthAncestor(node, k)\n */"},{"value":"kotlin","text":"Kotlin","defaultCode":"class TreeAncestor(n: Int, parent: IntArray) {\n\n    fun getKthAncestor(node: Int, k: Int): Int {\n\n    }\n\n}\n\n/**\n * Your TreeAncestor object will be instantiated and called as such:\n * var obj = TreeAncestor(n, parent)\n * var param_1 = obj.getKthAncestor(node,k)\n */"},{"value":"dart","text":"Dart","defaultCode":"class TreeAncestor {\n\n  TreeAncestor(int n, List<int> parent) {\n    \n  }\n  \n  int getKthAncestor(int node, int k) {\n    \n  }\n}\n\n/**\n * Your TreeAncestor object will be instantiated and called as such:\n * TreeAncestor obj = TreeAncestor(n, parent);\n * int param1 = obj.getKthAncestor(node,k);\n */"},{"value":"golang","text":"Go","defaultCode":"type TreeAncestor struct {\n\n}\n\n\nfunc Constructor(n int, parent []int) TreeAncestor {\n\n}\n\n\nfunc (this *TreeAncestor) GetKthAncestor(node int, k int) int {\n\n}\n\n\n/**\n * Your TreeAncestor object will be instantiated and called as such:\n * obj := Constructor(n, parent);\n * param_1 := obj.GetKthAncestor(node,k);\n */"},{"value":"ruby","text":"Ruby","defaultCode":"class TreeAncestor\n\n=begin\n    :type n: Integer\n    :type parent: Integer[]\n=end\n    def initialize(n, parent)\n        \n    end\n\n\n=begin\n    :type node: Integer\n    :type k: Integer\n    :rtype: Integer\n=end\n    def get_kth_ancestor(node, k)\n        \n    end\n\n\nend\n\n# Your TreeAncestor object will be instantiated and called as such:\n# obj = TreeAncestor.new(n, parent)\n# param_1 = obj.get_kth_ancestor(node, k)"},{"value":"scala","text":"Scala","defaultCode":"class TreeAncestor(_n: Int, _parent: Array[Int]) {\n\n    def getKthAncestor(node: Int, k: Int): Int = {\n        \n    }\n\n}\n\n/**\n * Your TreeAncestor object will be instantiated and called as such:\n * val obj = new TreeAncestor(n, parent)\n * val param_1 = obj.getKthAncestor(node,k)\n */"},{"value":"rust","text":"Rust","defaultCode":"struct TreeAncestor {\n\n}\n\n\n/**\n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl TreeAncestor {\n\n    fn new(n: i32, parent: Vec<i32>) -> Self {\n\n    }\n    \n    fn get_kth_ancestor(&self, node: i32, k: i32) -> i32 {\n\n    }\n}\n\n/**\n * Your TreeAncestor object will be instantiated and called as such:\n * let obj = TreeAncestor::new(n, parent);\n * let ret_1: i32 = obj.get_kth_ancestor(node, k);\n */"},{"value":"racket","text":"Racket","defaultCode":"(define tree-ancestor%\n  (class object%\n    (super-new)\n    \n    ; n : exact-integer?\n    ; parent : (listof exact-integer?)\n    (init-field\n      n\n      parent)\n    \n    ; get-kth-ancestor : exact-integer? exact-integer? -> exact-integer?\n    (define/public (get-kth-ancestor node k)\n      )))\n\n;; Your tree-ancestor% object will be instantiated and called as such:\n;; (define obj (new tree-ancestor% [n n] [parent parent]))\n;; (define param_1 (send obj get-kth-ancestor node k))"},{"value":"erlang","text":"Erlang","defaultCode":"-spec tree_ancestor_init_(N :: integer(), Parent :: [integer()]) -> any().\ntree_ancestor_init_(N, Parent) ->\n  .\n\n-spec tree_ancestor_get_kth_ancestor(Node :: integer(), K :: integer()) -> integer().\ntree_ancestor_get_kth_ancestor(Node, K) ->\n  .\n\n\n%% Your functions will be called as such:\n%% tree_ancestor_init_(N, Parent),\n%% Param_1 = tree_ancestor_get_kth_ancestor(Node, K),\n\n%% tree_ancestor_init_ will be called before every test case, in which you can do some necessary initializations."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule TreeAncestor do\n  @spec init_(n :: integer, parent :: [integer]) :: any\n  def init_(n, parent) do\n    \n  end\n\n  @spec get_kth_ancestor(node :: integer, k :: integer) :: integer\n  def get_kth_ancestor(node, k) do\n    \n  end\nend\n\n# Your functions will be called as such:\n# TreeAncestor.init_(n, parent)\n# param_1 = TreeAncestor.get_kth_ancestor(node, k)\n\n# TreeAncestor.init_ will be called before every test case, in which you can do some necessary initializations."}],"testcase":"[\"TreeAncestor\",\"getKthAncestor\",\"getKthAncestor\",\"getKthAncestor\"]\n[[7,[-1,0,0,1,1,2,2]],[3,1],[5,2],[6,3]]","testable":true,"templateMeta":{"classname":"TreeAncestor","constructor":{"params":[{"type":"integer","name":"n"},{"name":"parent","type":"integer[]"}]},"methods":[{"params":[{"type":"integer","name":"node"},{"type":"integer","name":"k"}],"name":"getKthAncestor","return":{"type":"integer"}}],"return":{"type":"boolean"},"systemdesign":true}}