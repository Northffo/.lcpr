{"id":494,"fid":"494","name":"目标和","slug":"target-sum","link":"https://leetcode.cn/problems/target-sum/description/","percent":48.294060056596436,"level":"Medium","category":"algorithms","en_name":"Target Sum","cn_name":"目标和","totalAC":"432.8K","totalSubmit":"896.2K","likes":1897,"dislikes":0,"desc":"<p>给你一个非负整数数组 <code>nums</code> 和一个整数 <code>target</code> 。</p>\n\n<p>向数组中的每个整数前添加&nbsp;<code>'+'</code> 或 <code>'-'</code> ，然后串联起所有整数，可以构造一个 <strong>表达式</strong> ：</p>\n\n<ul>\n\t<li>例如，<code>nums = [2, 1]</code> ，可以在 <code>2</code> 之前添加 <code>'+'</code> ，在 <code>1</code> 之前添加 <code>'-'</code> ，然后串联起来得到表达式 <code>\"+2-1\"</code> 。</li>\n</ul>\n\n<p>返回可以通过上述方法构造的、运算结果等于 <code>target</code> 的不同 <strong>表达式</strong> 的数目。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>nums = [1,1,1,1,1], target = 3\n<strong>输出：</strong>5\n<strong>解释：</strong>一共有 5 种方法让最终目标和为 3 。\n-1 + 1 + 1 + 1 + 1 = 3\n+1 - 1 + 1 + 1 + 1 = 3\n+1 + 1 - 1 + 1 + 1 = 3\n+1 + 1 + 1 - 1 + 1 = 3\n+1 + 1 + 1 + 1 - 1 = 3\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>nums = [1], target = 1\n<strong>输出：</strong>1\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 20</code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 1000</code></li>\n\t<li><code>0 &lt;= sum(nums[i]) &lt;= 1000</code></li>\n\t<li><code>-1000 &lt;= target &lt;= 1000</code></li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int findTargetSumWays(vector<int>& nums, int target) {\n\n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int findTargetSumWays(int[] nums, int target) {\n\n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def findTargetSumWays(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def findTargetSumWays(self, nums: List[int], target: int) -> int:"},{"value":"c","text":"C","defaultCode":"int findTargetSumWays(int* nums, int numsSize, int target) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int FindTargetSumWays(int[] nums, int target) {\n\n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number}\n */\nvar findTargetSumWays = function(nums, target) {\n\n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function findTargetSumWays(nums: number[], target: number): number {\n    \n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $target\n     * @return Integer\n     */\n    function findTargetSumWays($nums, $target) {\n\n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func findTargetSumWays(_ nums: [Int], _ target: Int) -> Int {\n\n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun findTargetSumWays(nums: IntArray, target: Int): Int {\n\n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  int findTargetSumWays(List<int> nums, int target) {\n    \n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func findTargetSumWays(nums []int, target int) int {\n\n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} nums\n# @param {Integer} target\n# @return {Integer}\ndef find_target_sum_ways(nums, target)\n\nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def findTargetSumWays(nums: Array[Int], target: Int): Int = {\n\n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn find_target_sum_ways(nums: Vec<i32>, target: i32) -> i32 {\n\n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (find-target-sum-ways nums target)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec find_target_sum_ways(Nums :: [integer()], Target :: integer()) -> integer().\nfind_target_sum_ways(Nums, Target) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec find_target_sum_ways(nums :: [integer], target :: integer) :: integer\n  def find_target_sum_ways(nums, target) do\n    \n  end\nend"}],"testcase":"[1,1,1,1,1]\n3","testable":true,"templateMeta":{"name":"findTargetSumWays","params":[{"name":"nums","type":"integer[]"},{"name":"target","type":"integer"}],"return":{"type":"integer"}}}