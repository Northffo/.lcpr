{"id":1562,"fid":"1452","name":"收藏清单","slug":"people-whose-list-of-favorite-companies-is-not-a-subset-of-another-list","link":"https://leetcode.cn/problems/people-whose-list-of-favorite-companies-is-not-a-subset-of-another-list/description/","percent":51.61174140104448,"level":"Medium","category":"algorithms","en_name":"People Whose List of Favorite Companies Is Not a Subset of Another List","cn_name":"收藏清单","totalAC":"8.6K","totalSubmit":"16.7K","likes":32,"dislikes":0,"desc":"<p>给你一个数组 <code>favoriteCompanies</code> ，其中 <code>favoriteCompanies[i]</code> 是第 <code>i</code> 名用户收藏的公司清单（<strong>下标从 0 开始</strong>）。</p>\n\n<p>请找出不是其他任何人收藏的公司清单的子集的收藏清单，并返回该清单下标<em>。</em>下标需要按升序排列<em>。</em></p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>favoriteCompanies = [[&quot;leetcode&quot;,&quot;google&quot;,&quot;facebook&quot;],[&quot;google&quot;,&quot;microsoft&quot;],[&quot;google&quot;,&quot;facebook&quot;],[&quot;google&quot;],[&quot;amazon&quot;]]\n<strong>输出：</strong>[0,1,4] \n<strong>解释：</strong>\nfavoriteCompanies[2]=[&quot;google&quot;,&quot;facebook&quot;] 是 favoriteCompanies[0]=[&quot;leetcode&quot;,&quot;google&quot;,&quot;facebook&quot;] 的子集。\nfavoriteCompanies[3]=[&quot;google&quot;] 是 favoriteCompanies[0]=[&quot;leetcode&quot;,&quot;google&quot;,&quot;facebook&quot;] 和 favoriteCompanies[1]=[&quot;google&quot;,&quot;microsoft&quot;] 的子集。\n其余的收藏清单均不是其他任何人收藏的公司清单的子集，因此，答案为 [0,1,4] 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>favoriteCompanies = [[&quot;leetcode&quot;,&quot;google&quot;,&quot;facebook&quot;],[&quot;leetcode&quot;,&quot;amazon&quot;],[&quot;facebook&quot;,&quot;google&quot;]]\n<strong>输出：</strong>[0,1] \n<strong>解释：</strong>favoriteCompanies[2]=[&quot;facebook&quot;,&quot;google&quot;] 是 favoriteCompanies[0]=[&quot;leetcode&quot;,&quot;google&quot;,&quot;facebook&quot;] 的子集，因此，答案为 [0,1] 。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><strong>输入：</strong>favoriteCompanies = [[&quot;leetcode&quot;],[&quot;google&quot;],[&quot;facebook&quot;],[&quot;amazon&quot;]]\n<strong>输出：</strong>[0,1,2,3]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;=&nbsp;favoriteCompanies.length &lt;= 100</code></li>\n\t<li><code>1 &lt;=&nbsp;favoriteCompanies[i].length &lt;= 500</code></li>\n\t<li><code>1 &lt;=&nbsp;favoriteCompanies[i][j].length &lt;= 20</code></li>\n\t<li><code>favoriteCompanies[i]</code> 中的所有字符串 <strong>各不相同</strong> 。</li>\n\t<li>用户收藏的公司清单也 <strong>各不相同</strong> ，也就是说，即便我们按字母顺序排序每个清单， <code>favoriteCompanies[i] != favoriteCompanies[j] </code>仍然成立。</li>\n\t<li>所有字符串仅包含小写英文字母。</li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    vector<int> peopleIndexes(vector<vector<string>>& favoriteCompanies) {\n\n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public List<Integer> peopleIndexes(List<List<String>> favoriteCompanies) {\n\n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def peopleIndexes(self, favoriteCompanies):\n        \"\"\"\n        :type favoriteCompanies: List[List[str]]\n        :rtype: List[int]\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def peopleIndexes(self, favoriteCompanies: List[List[str]]) -> List[int]:"},{"value":"c","text":"C","defaultCode":"/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* peopleIndexes(char*** favoriteCompanies, int favoriteCompaniesSize, int* favoriteCompaniesColSize, int* returnSize) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public IList<int> PeopleIndexes(IList<IList<string>> favoriteCompanies) {\n\n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {string[][]} favoriteCompanies\n * @return {number[]}\n */\nvar peopleIndexes = function(favoriteCompanies) {\n\n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function peopleIndexes(favoriteCompanies: string[][]): number[] {\n    \n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param String[][] $favoriteCompanies\n     * @return Integer[]\n     */\n    function peopleIndexes($favoriteCompanies) {\n\n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func peopleIndexes(_ favoriteCompanies: [[String]]) -> [Int] {\n\n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun peopleIndexes(favoriteCompanies: List<List<String>>): List<Int> {\n\n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  List<int> peopleIndexes(List<List<String>> favoriteCompanies) {\n    \n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func peopleIndexes(favoriteCompanies [][]string) []int {\n\n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String[][]} favorite_companies\n# @return {Integer[]}\ndef people_indexes(favorite_companies)\n\nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def peopleIndexes(favoriteCompanies: List[List[String]]): List[Int] = {\n\n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn people_indexes(favorite_companies: Vec<Vec<String>>) -> Vec<i32> {\n\n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (people-indexes favoriteCompanies)\n  (-> (listof (listof string?)) (listof exact-integer?))\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec people_indexes(FavoriteCompanies :: [[unicode:unicode_binary()]]) -> [integer()].\npeople_indexes(FavoriteCompanies) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec people_indexes(favorite_companies :: [[String.t]]) :: [integer]\n  def people_indexes(favorite_companies) do\n    \n  end\nend"}],"testcase":"[[\"leetcode\",\"google\",\"facebook\"],[\"google\",\"microsoft\"],[\"google\",\"facebook\"],[\"google\"],[\"amazon\"]]","testable":true,"templateMeta":{"name":"peopleIndexes","params":[{"type":"list<list<string>>","name":"favoriteCompanies"}],"return":{"type":"list<integer>"}}}