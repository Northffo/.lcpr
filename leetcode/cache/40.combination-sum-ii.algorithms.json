{"id":40,"fid":"40","name":"组合总和 II","slug":"combination-sum-ii","link":"https://leetcode.cn/problems/combination-sum-ii/description/","percent":59.45175443599999,"level":"Medium","category":"algorithms","en_name":"Combination Sum II","cn_name":"组合总和 II","totalAC":"521.2K","totalSubmit":"876.7K","likes":1537,"dislikes":0,"desc":"<p>给定一个候选人编号的集合&nbsp;<code>candidates</code>&nbsp;和一个目标数&nbsp;<code>target</code>&nbsp;，找出&nbsp;<code>candidates</code>&nbsp;中所有可以使数字和为&nbsp;<code>target</code>&nbsp;的组合。</p>\n\n<p><code>candidates</code>&nbsp;中的每个数字在每个组合中只能使用&nbsp;<strong>一次</strong>&nbsp;。</p>\n\n<p><strong>注意：</strong>解集不能包含重复的组合。&nbsp;</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例&nbsp;1:</strong></p>\n\n<pre>\n<strong>输入:</strong> candidates =&nbsp;<code>[10,1,2,7,6,1,5]</code>, target =&nbsp;<code>8</code>,\n<strong>输出:</strong>\n[\n[1,1,6],\n[1,2,5],\n[1,7],\n[2,6]\n]</pre>\n\n<p><strong>示例&nbsp;2:</strong></p>\n\n<pre>\n<strong>输入:</strong> candidates =&nbsp;[2,5,2,1,2], target =&nbsp;5,\n<strong>输出:</strong>\n[\n[1,2,2],\n[5]\n]</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;=&nbsp;candidates.length &lt;= 100</code></li>\n\t<li><code>1 &lt;=&nbsp;candidates[i] &lt;= 50</code></li>\n\t<li><code>1 &lt;= target &lt;= 30</code></li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {\n\n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public List<List<Integer>> combinationSum2(int[] candidates, int target) {\n\n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def combinationSum2(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def combinationSum2(self, candidates: List[int], target: int) -> List[List[int]]:"},{"value":"c","text":"C","defaultCode":"/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nint** combinationSum2(int* candidates, int candidatesSize, int target, int* returnSize, int** returnColumnSizes) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public IList<IList<int>> CombinationSum2(int[] candidates, int target) {\n\n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[]} candidates\n * @param {number} target\n * @return {number[][]}\n */\nvar combinationSum2 = function(candidates, target) {\n\n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function combinationSum2(candidates: number[], target: number): number[][] {\n    \n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer[] $candidates\n     * @param Integer $target\n     * @return Integer[][]\n     */\n    function combinationSum2($candidates, $target) {\n\n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func combinationSum2(_ candidates: [Int], _ target: Int) -> [[Int]] {\n\n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun combinationSum2(candidates: IntArray, target: Int): List<List<Int>> {\n\n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  List<List<int>> combinationSum2(List<int> candidates, int target) {\n    \n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func combinationSum2(candidates []int, target int) [][]int {\n\n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} candidates\n# @param {Integer} target\n# @return {Integer[][]}\ndef combination_sum2(candidates, target)\n\nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def combinationSum2(candidates: Array[Int], target: Int): List[List[Int]] = {\n\n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn combination_sum2(candidates: Vec<i32>, target: i32) -> Vec<Vec<i32>> {\n\n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (combination-sum2 candidates target)\n  (-> (listof exact-integer?) exact-integer? (listof (listof exact-integer?)))\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec combination_sum2(Candidates :: [integer()], Target :: integer()) -> [[integer()]].\ncombination_sum2(Candidates, Target) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec combination_sum2(candidates :: [integer], target :: integer) :: [[integer]]\n  def combination_sum2(candidates, target) do\n    \n  end\nend"}],"testcase":"[10,1,2,7,6,1,5]\n8","testable":true,"templateMeta":{"name":"combinationSum2","params":[{"name":"candidates","type":"integer[]"},{"name":"target","type":"integer"}],"return":{"type":"list<list<integer>>","dealloc":true}}}