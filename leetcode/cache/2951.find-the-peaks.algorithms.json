{"id":3221,"fid":"2951","name":"找出峰值","slug":"find-the-peaks","link":"https://leetcode.cn/problems/find-the-peaks/description/","percent":79.30244664237377,"level":"Easy","category":"algorithms","en_name":"Find the Peaks","cn_name":"找出峰值","totalAC":"22.6K","totalSubmit":"27K","likes":18,"dislikes":0,"desc":"<p>给你一个下标从 <strong>0</strong> 开始的数组 <code>mountain</code> 。你的任务是找出数组&nbsp;<code>mountain</code> 中的所有 <strong>峰值</strong>。</p>\n\n<p>以数组形式返回给定数组中 <strong>峰值</strong> 的下标，<strong>顺序不限</strong> 。</p>\n\n<p><strong>注意：</strong></p>\n\n<ul>\n\t<li><strong>峰值</strong> 是指一个严格大于其相邻元素的元素。</li>\n\t<li>数组的第一个和最后一个元素 <strong>不</strong> 是峰值。</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong class=\"example\">示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>mountain = [2,4,4]\n<strong>输出：</strong>[]\n<strong>解释：</strong>mountain[0] 和 mountain[2] 不可能是峰值，因为它们是数组的第一个和最后一个元素。\nmountain[1] 也不可能是峰值，因为它不严格大于 mountain[2] 。\n因此，答案为 [] 。\n</pre>\n\n<p><strong class=\"example\">示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>mountain = [1,4,3,8,5]\n<strong>输出：</strong>[1,3]\n<strong>解释：</strong>mountain[0] 和 mountain[4] 不可能是峰值，因为它们是数组的第一个和最后一个元素。\nmountain[2] 也不可能是峰值，因为它不严格大于 mountain[3] 和 mountain[1] 。\n但是 mountain[1] 和 mountain[3] 严格大于它们的相邻元素。\n因此，答案是 [1,3] 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>3 &lt;= mountain.length &lt;= 100</code></li>\n\t<li><code>1 &lt;= mountain[i] &lt;= 100</code></li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    vector<int> findPeaks(vector<int>& mountain) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public List<Integer> findPeaks(int[] mountain) {\n\n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def findPeaks(self, mountain):\n        \"\"\"\n        :type mountain: List[int]\n        :rtype: List[int]\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def findPeaks(self, mountain: List[int]) -> List[int]:"},{"value":"c","text":"C","defaultCode":"/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* findPeaks(int* mountain, int mountainSize, int* returnSize) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public IList<int> FindPeaks(int[] mountain) {\n\n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[]} mountain\n * @return {number[]}\n */\nvar findPeaks = function(mountain) {\n\n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function findPeaks(mountain: number[]): number[] {\n    \n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer[] $mountain\n     * @return Integer[]\n     */\n    function findPeaks($mountain) {\n\n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func findPeaks(_ mountain: [Int]) -> [Int] {\n\n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun findPeaks(mountain: IntArray): List<Int> {\n\n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  List<int> findPeaks(List<int> mountain) {\n    \n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func findPeaks(mountain []int) []int {\n\n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} mountain\n# @return {Integer[]}\ndef find_peaks(mountain)\n\nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def findPeaks(mountain: Array[Int]): List[Int] = {\n\n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn find_peaks(mountain: Vec<i32>) -> Vec<i32> {\n\n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (find-peaks mountain)\n  (-> (listof exact-integer?) (listof exact-integer?))\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec find_peaks(Mountain :: [integer()]) -> [integer()].\nfind_peaks(Mountain) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec find_peaks(mountain :: [integer]) :: [integer]\n  def find_peaks(mountain) do\n    \n  end\nend"}],"testcase":"[2,4,4]","testable":true,"templateMeta":{"name":"findPeaks","params":[{"name":"mountain","type":"integer[]"}],"return":{"type":"list<integer>"}}}