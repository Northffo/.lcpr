{"id":1584,"fid":"1491","name":"去掉最低工资和最高工资后的工资平均值","slug":"average-salary-excluding-the-minimum-and-maximum-salary","link":"https://leetcode.cn/problems/average-salary-excluding-the-minimum-and-maximum-salary/description/","percent":62.433136331764,"level":"Easy","category":"algorithms","en_name":"Average Salary Excluding the Minimum and Maximum Salary","cn_name":"去掉最低工资和最高工资后的工资平均值","totalAC":"69.2K","totalSubmit":"108.2K","likes":72,"dislikes":0,"desc":"<p>给你一个整数数组&nbsp;<code>salary</code>&nbsp;，数组里每个数都是 <strong>唯一</strong>&nbsp;的，其中&nbsp;<code>salary[i]</code> 是第&nbsp;<code>i</code>&nbsp;个员工的工资。</p>\n\n<p>请你返回去掉最低工资和最高工资以后，剩下员工工资的平均值。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>salary = [4000,3000,1000,2000]\n<strong>输出：</strong>2500.00000\n<strong>解释：</strong>最低工资和最高工资分别是 1000 和 4000 。\n去掉最低工资和最高工资以后的平均工资是 (2000+3000)/2= 2500\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>salary = [1000,2000,3000]\n<strong>输出：</strong>2000.00000\n<strong>解释：</strong>最低工资和最高工资分别是 1000 和 3000 。\n去掉最低工资和最高工资以后的平均工资是 (2000)/1= 2000\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><strong>输入：</strong>salary = [6000,5000,4000,3000,2000,1000]\n<strong>输出：</strong>3500.00000\n</pre>\n\n<p><strong>示例 4：</strong></p>\n\n<pre><strong>输入：</strong>salary = [8000,9000,2000,3000,6000,1000]\n<strong>输出：</strong>4750.00000\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>3 &lt;= salary.length &lt;= 100</code></li>\n\t<li><code>10^3&nbsp;&lt;= salary[i] &lt;= 10^6</code></li>\n\t<li><code>salary[i]</code>&nbsp;是唯一的。</li>\n\t<li>与真实值误差在&nbsp;<code>10^-5</code> 以内的结果都将视为正确答案。</li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    double average(vector<int>& salary) {\n\n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public double average(int[] salary) {\n\n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def average(self, salary):\n        \"\"\"\n        :type salary: List[int]\n        :rtype: float\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def average(self, salary: List[int]) -> float:"},{"value":"c","text":"C","defaultCode":"double average(int* salary, int salarySize) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public double Average(int[] salary) {\n\n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[]} salary\n * @return {number}\n */\nvar average = function(salary) {\n\n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function average(salary: number[]): number {\n    \n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer[] $salary\n     * @return Float\n     */\n    function average($salary) {\n\n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func average(_ salary: [Int]) -> Double {\n\n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun average(salary: IntArray): Double {\n\n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  double average(List<int> salary) {\n    \n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func average(salary []int) float64 {\n\n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} salary\n# @return {Float}\ndef average(salary)\n\nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def average(salary: Array[Int]): Double = {\n\n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn average(salary: Vec<i32>) -> f64 {\n\n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (average salary)\n  (-> (listof exact-integer?) flonum?)\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec average(Salary :: [integer()]) -> float().\naverage(Salary) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec average(salary :: [integer]) :: float\n  def average(salary) do\n    \n  end\nend"}],"testcase":"[4000,3000,1000,2000]","testable":true,"templateMeta":{"name":"average","params":[{"name":"salary","type":"integer[]"}],"return":{"type":"double"}}}