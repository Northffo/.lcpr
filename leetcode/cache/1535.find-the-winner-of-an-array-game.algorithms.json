{"id":1657,"fid":"1535","name":"找出数组游戏的赢家","slug":"find-the-winner-of-an-array-game","link":"https://leetcode.cn/problems/find-the-winner-of-an-array-game/description/","percent":46.45685488018101,"level":"Medium","category":"algorithms","en_name":"Find the Winner of an Array Game","cn_name":"找出数组游戏的赢家","totalAC":"26K","totalSubmit":"51.3K","likes":74,"dislikes":0,"desc":"<p>给你一个由 <strong>不同</strong> 整数组成的整数数组 <code>arr</code> 和一个整数 <code>k</code> 。</p>\n\n<p>每回合游戏都在数组的前两个元素（即 <code>arr[0]</code> 和 <code>arr[1]</code> ）之间进行。比较 <code>arr[0]</code> 与 <code>arr[1]</code> 的大小，较大的整数将会取得这一回合的胜利并保留在位置 <code>0</code> ，较小的整数移至数组的末尾。当一个整数赢得 <code>k</code> 个连续回合时，游戏结束，该整数就是比赛的 <strong>赢家</strong> 。</p>\n\n<p>返回赢得比赛的整数。</p>\n\n<p>题目数据 <strong>保证</strong> 游戏存在赢家。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>arr = [2,1,3,5,4,6,7], k = 2\n<strong>输出：</strong>5\n<strong>解释：</strong>一起看一下本场游戏每回合的情况：\n<img alt=\"\" src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/07/30/q-example.png\" style=\"height: 90px; width: 400px;\">\n因此将进行 4 回合比赛，其中 5 是赢家，因为它连胜 2 回合。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>arr = [3,2,1], k = 10\n<strong>输出：</strong>3\n<strong>解释：</strong>3 将会在前 10 个回合中连续获胜。\n</pre>\n\n<p><strong>示例 3：</strong></p>\n\n<pre><strong>输入：</strong>arr = [1,9,8,2,3,7,6,4,5], k = 7\n<strong>输出：</strong>9\n</pre>\n\n<p><strong>示例 4：</strong></p>\n\n<pre><strong>输入：</strong>arr = [1,11,22,33,44,55,66,77,88,99], k = 1000000000\n<strong>输出：</strong>99\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= arr.length &lt;= 10^5</code></li>\n\t<li><code>1 &lt;= arr[i] &lt;= 10^6</code></li>\n\t<li><code>arr</code> 所含的整数 <strong>各不相同</strong> 。</li>\n\t<li><code>1 &lt;= k &lt;= 10^9</code></li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int getWinner(vector<int>& arr, int k) {\n\n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int getWinner(int[] arr, int k) {\n\n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def getWinner(self, arr, k):\n        \"\"\"\n        :type arr: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def getWinner(self, arr: List[int], k: int) -> int:"},{"value":"c","text":"C","defaultCode":"\n\nint getWinner(int* arr, int arrSize, int k){\n\n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int GetWinner(int[] arr, int k) {\n\n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[]} arr\n * @param {number} k\n * @return {number}\n */\nvar getWinner = function(arr, k) {\n\n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function getWinner(arr: number[], k: number): number {\n\n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer[] $arr\n     * @param Integer $k\n     * @return Integer\n     */\n    function getWinner($arr, $k) {\n\n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func getWinner(_ arr: [Int], _ k: Int) -> Int {\n\n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun getWinner(arr: IntArray, k: Int): Int {\n\n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  int getWinner(List<int> arr, int k) {\n\n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func getWinner(arr []int, k int) int {\n\n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} arr\n# @param {Integer} k\n# @return {Integer}\ndef get_winner(arr, k)\n\nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def getWinner(arr: Array[Int], k: Int): Int = {\n\n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn get_winner(arr: Vec<i32>, k: i32) -> i32 {\n\n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (get-winner arr k)\n  (-> (listof exact-integer?) exact-integer? exact-integer?)\n\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec get_winner(Arr :: [integer()], K :: integer()) -> integer().\nget_winner(Arr, K) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec get_winner(arr :: [integer], k :: integer) :: integer\n  def get_winner(arr, k) do\n\n  end\nend"}],"testcase":"[2,1,3,5,4,6,7]\n2","testable":true,"templateMeta":{"name":"getWinner","params":[{"name":"arr","type":"integer[]"},{"type":"integer","name":"k"}],"return":{"type":"integer"}}}