{"id":28,"fid":"28","name":"找出字符串中第一个匹配项的下标","slug":"find-the-index-of-the-first-occurrence-in-a-string","link":"https://leetcode.cn/problems/find-the-index-of-the-first-occurrence-in-a-string/description/","percent":43.511027917729045,"level":"Easy","category":"algorithms","en_name":"Find the Index of the First Occurrence in a String","cn_name":"找出字符串中第一个匹配项的下标","totalAC":"1M","totalSubmit":"2.4M","likes":2190,"dislikes":0,"desc":"<p>给你两个字符串&nbsp;<code>haystack</code> 和 <code>needle</code> ，请你在 <code>haystack</code> 字符串中找出 <code>needle</code> 字符串的第一个匹配项的下标（下标从 0 开始）。如果&nbsp;<code>needle</code> 不是 <code>haystack</code> 的一部分，则返回&nbsp; <code>-1</code><strong> </strong>。</p>\n\n<p>&nbsp;</p>\n\n<p><strong class=\"example\">示例 1：</strong></p>\n\n<pre>\n<strong>输入：</strong>haystack = \"sadbutsad\", needle = \"sad\"\n<strong>输出：</strong>0\n<strong>解释：</strong>\"sad\" 在下标 0 和 6 处匹配。\n第一个匹配项的下标是 0 ，所以返回 0 。\n</pre>\n\n<p><strong class=\"example\">示例 2：</strong></p>\n\n<pre>\n<strong>输入：</strong>haystack = \"leetcode\", needle = \"leeto\"\n<strong>输出：</strong>-1\n<strong>解释：</strong>\"leeto\" 没有在 \"leetcode\" 中出现，所以返回 -1 。\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= haystack.length, needle.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>haystack</code> 和 <code>needle</code> 仅由小写英文字符组成</li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    int strStr(string haystack, string needle) {\n\n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int strStr(String haystack, String needle) {\n\n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def strStr(self, haystack, needle):\n        \"\"\"\n        :type haystack: str\n        :type needle: str\n        :rtype: int\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def strStr(self, haystack: str, needle: str) -> int:"},{"value":"c","text":"C","defaultCode":"int strStr(char* haystack, char* needle) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int StrStr(string haystack, string needle) {\n\n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {string} haystack\n * @param {string} needle\n * @return {number}\n */\nvar strStr = function(haystack, needle) {\n\n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function strStr(haystack: string, needle: string): number {\n    \n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param String $haystack\n     * @param String $needle\n     * @return Integer\n     */\n    function strStr($haystack, $needle) {\n\n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func strStr(_ haystack: String, _ needle: String) -> Int {\n\n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun strStr(haystack: String, needle: String): Int {\n\n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  int strStr(String haystack, String needle) {\n    \n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func strStr(haystack string, needle string) int {\n\n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String} haystack\n# @param {String} needle\n# @return {Integer}\ndef str_str(haystack, needle)\n\nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def strStr(haystack: String, needle: String): Int = {\n\n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn str_str(haystack: String, needle: String) -> i32 {\n\n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (str-str haystack needle)\n  (-> string? string? exact-integer?)\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec str_str(Haystack :: unicode:unicode_binary(), Needle :: unicode:unicode_binary()) -> integer().\nstr_str(Haystack, Needle) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec str_str(haystack :: String.t, needle :: String.t) :: integer\n  def str_str(haystack, needle) do\n    \n  end\nend"}],"testcase":"\"sadbutsad\"\n\"sad\"","testable":true,"templateMeta":{"name":"strStr","params":[{"name":"haystack","type":"string"},{"name":"needle","type":"string"}],"return":{"type":"integer"}}}