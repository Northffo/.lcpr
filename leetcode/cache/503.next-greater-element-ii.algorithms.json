{"id":503,"fid":"503","name":"下一个更大元素 II","slug":"next-greater-element-ii","link":"https://leetcode.cn/problems/next-greater-element-ii/description/","percent":67.34627979677329,"level":"Medium","category":"algorithms","en_name":"Next Greater Element II","cn_name":"下一个更大元素 II","totalAC":"235.8K","totalSubmit":"350.2K","likes":923,"dislikes":0,"desc":"<p>给定一个循环数组&nbsp;<code>nums</code>&nbsp;（&nbsp;<code>nums[nums.length - 1]</code>&nbsp;的下一个元素是&nbsp;<code>nums[0]</code>&nbsp;），返回&nbsp;<em><code>nums</code>&nbsp;中每个元素的 <strong>下一个更大元素</strong></em> 。</p>\n\n<p>数字 <code>x</code>&nbsp;的 <strong>下一个更大的元素</strong> 是按数组遍历顺序，这个数字之后的第一个比它更大的数，这意味着你应该循环地搜索它的下一个更大的数。如果不存在，则输出 <code>-1</code>&nbsp;。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1:</strong></p>\n\n<pre>\n<strong>输入:</strong> nums = [1,2,1]\n<strong>输出:</strong> [2,-1,2]\n<strong>解释:</strong> 第一个 1 的下一个更大的数是 2；\n数字 2 找不到下一个更大的数； \n第二个 1 的下一个最大的数需要循环搜索，结果也是 2。\n</pre>\n\n<p><strong>示例 2:</strong></p>\n\n<pre>\n<strong>输入:</strong> nums = [1,2,3,4,3]\n<strong>输出:</strong> [2,3,4,-1,4]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>-10<sup>9</sup>&nbsp;&lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    vector<int> nextGreaterElements(vector<int>& nums) {\n\n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public int[] nextGreaterElements(int[] nums) {\n\n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def nextGreaterElements(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def nextGreaterElements(self, nums: List[int]) -> List[int]:"},{"value":"c","text":"C","defaultCode":"/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* nextGreaterElements(int* nums, int numsSize, int* returnSize) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public int[] NextGreaterElements(int[] nums) {\n\n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {number[]} nums\n * @return {number[]}\n */\nvar nextGreaterElements = function(nums) {\n\n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function nextGreaterElements(nums: number[]): number[] {\n    \n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer[]\n     */\n    function nextGreaterElements($nums) {\n\n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func nextGreaterElements(_ nums: [Int]) -> [Int] {\n\n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun nextGreaterElements(nums: IntArray): IntArray {\n\n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  List<int> nextGreaterElements(List<int> nums) {\n    \n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func nextGreaterElements(nums []int) []int {\n\n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {Integer[]} nums\n# @return {Integer[]}\ndef next_greater_elements(nums)\n\nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def nextGreaterElements(nums: Array[Int]): Array[Int] = {\n\n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn next_greater_elements(nums: Vec<i32>) -> Vec<i32> {\n\n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (next-greater-elements nums)\n  (-> (listof exact-integer?) (listof exact-integer?))\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec next_greater_elements(Nums :: [integer()]) -> [integer()].\nnext_greater_elements(Nums) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec next_greater_elements(nums :: [integer]) :: [integer]\n  def next_greater_elements(nums) do\n    \n  end\nend"}],"testcase":"[1,2,1]","testable":true,"templateMeta":{"name":"nextGreaterElements","params":[{"name":"nums","type":"integer[]"}],"return":{"type":"integer[]"}}}