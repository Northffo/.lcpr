{"id":838,"fid":"707","name":"设计链表","slug":"design-linked-list","link":"https://leetcode.cn/problems/design-linked-list/description/","percent":34.422533524628484,"level":"Medium","category":"algorithms","en_name":"Design Linked List","cn_name":"设计链表","totalAC":"299K","totalSubmit":"868.6K","likes":1008,"dislikes":0,"desc":"<p>你可以选择使用单链表或者双链表，设计并实现自己的链表。</p>\n\n<p>单链表中的节点应该具备两个属性：<code>val</code> 和 <code>next</code> 。<code>val</code> 是当前节点的值，<code>next</code> 是指向下一个节点的指针/引用。</p>\n\n<p>如果是双向链表，则还需要属性&nbsp;<code>prev</code>&nbsp;以指示链表中的上一个节点。假设链表中的所有节点下标从 <strong>0</strong> 开始。</p>\n\n<p>实现 <code>MyLinkedList</code> 类：</p>\n\n<ul>\n\t<li><code>MyLinkedList()</code> 初始化 <code>MyLinkedList</code> 对象。</li>\n\t<li><code>int get(int index)</code> 获取链表中下标为 <code>index</code> 的节点的值。如果下标无效，则返回 <code>-1</code> 。</li>\n\t<li><code>void addAtHead(int val)</code> 将一个值为 <code>val</code> 的节点插入到链表中第一个元素之前。在插入完成后，新节点会成为链表的第一个节点。</li>\n\t<li><code>void addAtTail(int val)</code> 将一个值为 <code>val</code> 的节点追加到链表中作为链表的最后一个元素。</li>\n\t<li><code>void addAtIndex(int index, int val)</code> 将一个值为 <code>val</code> 的节点插入到链表中下标为 <code>index</code> 的节点之前。如果 <code>index</code> 等于链表的长度，那么该节点会被追加到链表的末尾。如果 <code>index</code> 比长度更大，该节点将 <strong>不会插入</strong> 到链表中。</li>\n\t<li><code>void deleteAtIndex(int index)</code> 如果下标有效，则删除链表中下标为 <code>index</code> 的节点。</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong class=\"example\">示例：</strong></p>\n\n<pre>\n<strong>输入</strong>\n[\"MyLinkedList\", \"addAtHead\", \"addAtTail\", \"addAtIndex\", \"get\", \"deleteAtIndex\", \"get\"]\n[[], [1], [3], [1, 2], [1], [1], [1]]\n<strong>输出</strong>\n[null, null, null, null, 2, null, 3]\n\n<strong>解释</strong>\nMyLinkedList myLinkedList = new MyLinkedList();\nmyLinkedList.addAtHead(1);\nmyLinkedList.addAtTail(3);\nmyLinkedList.addAtIndex(1, 2);    // 链表变为 1-&gt;2-&gt;3\nmyLinkedList.get(1);              // 返回 2\nmyLinkedList.deleteAtIndex(1);    // 现在，链表变为 1-&gt;3\nmyLinkedList.get(1);              // 返回 3\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= index, val &lt;= 1000</code></li>\n\t<li>请不要使用内置的 LinkedList 库。</li>\n\t<li>调用 <code>get</code>、<code>addAtHead</code>、<code>addAtTail</code>、<code>addAtIndex</code> 和 <code>deleteAtIndex</code> 的次数不超过 <code>2000</code> 。</li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class MyLinkedList {\npublic:\n    MyLinkedList() {\n\n    }\n    \n    int get(int index) {\n\n    }\n    \n    void addAtHead(int val) {\n\n    }\n    \n    void addAtTail(int val) {\n\n    }\n    \n    void addAtIndex(int index, int val) {\n\n    }\n    \n    void deleteAtIndex(int index) {\n\n    }\n};\n\n/**\n * Your MyLinkedList object will be instantiated and called as such:\n * MyLinkedList* obj = new MyLinkedList();\n * int param_1 = obj->get(index);\n * obj->addAtHead(val);\n * obj->addAtTail(val);\n * obj->addAtIndex(index,val);\n * obj->deleteAtIndex(index);\n */"},{"value":"java","text":"Java","defaultCode":"class MyLinkedList {\n\n    public MyLinkedList() {\n\n    }\n    \n    public int get(int index) {\n\n    }\n    \n    public void addAtHead(int val) {\n\n    }\n    \n    public void addAtTail(int val) {\n\n    }\n    \n    public void addAtIndex(int index, int val) {\n\n    }\n    \n    public void deleteAtIndex(int index) {\n\n    }\n}\n\n/**\n * Your MyLinkedList object will be instantiated and called as such:\n * MyLinkedList obj = new MyLinkedList();\n * int param_1 = obj.get(index);\n * obj.addAtHead(val);\n * obj.addAtTail(val);\n * obj.addAtIndex(index,val);\n * obj.deleteAtIndex(index);\n */"},{"value":"python","text":"Python","defaultCode":"class MyLinkedList(object):\n\n    def __init__(self):\n\n\n    def get(self, index):\n        \"\"\"\n        :type index: int\n        :rtype: int\n        \"\"\"\n\n\n    def addAtHead(self, val):\n        \"\"\"\n        :type val: int\n        :rtype: None\n        \"\"\"\n\n\n    def addAtTail(self, val):\n        \"\"\"\n        :type val: int\n        :rtype: None\n        \"\"\"\n\n\n    def addAtIndex(self, index, val):\n        \"\"\"\n        :type index: int\n        :type val: int\n        :rtype: None\n        \"\"\"\n\n\n    def deleteAtIndex(self, index):\n        \"\"\"\n        :type index: int\n        :rtype: None\n        \"\"\"\n\n\n\n# Your MyLinkedList object will be instantiated and called as such:\n# obj = MyLinkedList()\n# param_1 = obj.get(index)\n# obj.addAtHead(val)\n# obj.addAtTail(val)\n# obj.addAtIndex(index,val)\n# obj.deleteAtIndex(index)"},{"value":"python3","text":"Python3","defaultCode":"class MyLinkedList:\n\n    def __init__(self):\n\n\n    def get(self, index: int) -> int:\n\n\n    def addAtHead(self, val: int) -> None:\n\n\n    def addAtTail(self, val: int) -> None:\n\n\n    def addAtIndex(self, index: int, val: int) -> None:\n\n\n    def deleteAtIndex(self, index: int) -> None:\n\n\n\n# Your MyLinkedList object will be instantiated and called as such:\n# obj = MyLinkedList()\n# param_1 = obj.get(index)\n# obj.addAtHead(val)\n# obj.addAtTail(val)\n# obj.addAtIndex(index,val)\n# obj.deleteAtIndex(index)"},{"value":"c","text":"C","defaultCode":"\n\n\ntypedef struct {\n    \n} MyLinkedList;\n\n\nMyLinkedList* myLinkedListCreate() {\n    \n}\n\nint myLinkedListGet(MyLinkedList* obj, int index) {\n    \n}\n\nvoid myLinkedListAddAtHead(MyLinkedList* obj, int val) {\n    \n}\n\nvoid myLinkedListAddAtTail(MyLinkedList* obj, int val) {\n    \n}\n\nvoid myLinkedListAddAtIndex(MyLinkedList* obj, int index, int val) {\n    \n}\n\nvoid myLinkedListDeleteAtIndex(MyLinkedList* obj, int index) {\n    \n}\n\nvoid myLinkedListFree(MyLinkedList* obj) {\n    \n}\n\n/**\n * Your MyLinkedList struct will be instantiated and called as such:\n * MyLinkedList* obj = myLinkedListCreate();\n * int param_1 = myLinkedListGet(obj, index);\n \n * myLinkedListAddAtHead(obj, val);\n \n * myLinkedListAddAtTail(obj, val);\n \n * myLinkedListAddAtIndex(obj, index, val);\n \n * myLinkedListDeleteAtIndex(obj, index);\n \n * myLinkedListFree(obj);\n*/"},{"value":"csharp","text":"C#","defaultCode":"public class MyLinkedList {\n\n    public MyLinkedList() {\n\n    }\n    \n    public int Get(int index) {\n\n    }\n    \n    public void AddAtHead(int val) {\n\n    }\n    \n    public void AddAtTail(int val) {\n\n    }\n    \n    public void AddAtIndex(int index, int val) {\n\n    }\n    \n    public void DeleteAtIndex(int index) {\n\n    }\n}\n\n/**\n * Your MyLinkedList object will be instantiated and called as such:\n * MyLinkedList obj = new MyLinkedList();\n * int param_1 = obj.Get(index);\n * obj.AddAtHead(val);\n * obj.AddAtTail(val);\n * obj.AddAtIndex(index,val);\n * obj.DeleteAtIndex(index);\n */"},{"value":"javascript","text":"JavaScript","defaultCode":"\nvar MyLinkedList = function() {\n\n};\n\n/** \n * @param {number} index\n * @return {number}\n */\nMyLinkedList.prototype.get = function(index) {\n\n};\n\n/** \n * @param {number} val\n * @return {void}\n */\nMyLinkedList.prototype.addAtHead = function(val) {\n\n};\n\n/** \n * @param {number} val\n * @return {void}\n */\nMyLinkedList.prototype.addAtTail = function(val) {\n\n};\n\n/** \n * @param {number} index \n * @param {number} val\n * @return {void}\n */\nMyLinkedList.prototype.addAtIndex = function(index, val) {\n\n};\n\n/** \n * @param {number} index\n * @return {void}\n */\nMyLinkedList.prototype.deleteAtIndex = function(index) {\n\n};\n\n/**\n * Your MyLinkedList object will be instantiated and called as such:\n * var obj = new MyLinkedList()\n * var param_1 = obj.get(index)\n * obj.addAtHead(val)\n * obj.addAtTail(val)\n * obj.addAtIndex(index,val)\n * obj.deleteAtIndex(index)\n */"},{"value":"typescript","text":"TypeScript","defaultCode":"class MyLinkedList {\n    constructor() {\n        \n    }\n\n    get(index: number): number {\n        \n    }\n\n    addAtHead(val: number): void {\n        \n    }\n\n    addAtTail(val: number): void {\n        \n    }\n\n    addAtIndex(index: number, val: number): void {\n        \n    }\n\n    deleteAtIndex(index: number): void {\n        \n    }\n}\n\n/**\n * Your MyLinkedList object will be instantiated and called as such:\n * var obj = new MyLinkedList()\n * var param_1 = obj.get(index)\n * obj.addAtHead(val)\n * obj.addAtTail(val)\n * obj.addAtIndex(index,val)\n * obj.deleteAtIndex(index)\n */"},{"value":"php","text":"PHP","defaultCode":"class MyLinkedList {\n    /**\n     */\n    function __construct() {\n\n    }\n\n    /**\n     * @param Integer $index\n     * @return Integer\n     */\n    function get($index) {\n\n    }\n\n    /**\n     * @param Integer $val\n     * @return NULL\n     */\n    function addAtHead($val) {\n\n    }\n\n    /**\n     * @param Integer $val\n     * @return NULL\n     */\n    function addAtTail($val) {\n\n    }\n\n    /**\n     * @param Integer $index\n     * @param Integer $val\n     * @return NULL\n     */\n    function addAtIndex($index, $val) {\n\n    }\n\n    /**\n     * @param Integer $index\n     * @return NULL\n     */\n    function deleteAtIndex($index) {\n\n    }\n}\n\n/**\n * Your MyLinkedList object will be instantiated and called as such:\n * $obj = MyLinkedList();\n * $ret_1 = $obj->get($index);\n * $obj->addAtHead($val);\n * $obj->addAtTail($val);\n * $obj->addAtIndex($index, $val);\n * $obj->deleteAtIndex($index);\n */"},{"value":"swift","text":"Swift","defaultCode":"\nclass MyLinkedList {\n\n    init() {\n\n    }\n    \n    func get(_ index: Int) -> Int {\n\n    }\n    \n    func addAtHead(_ val: Int) {\n\n    }\n    \n    func addAtTail(_ val: Int) {\n\n    }\n    \n    func addAtIndex(_ index: Int, _ val: Int) {\n\n    }\n    \n    func deleteAtIndex(_ index: Int) {\n\n    }\n}\n\n/**\n * Your MyLinkedList object will be instantiated and called as such:\n * let obj = MyLinkedList()\n * let ret_1: Int = obj.get(index)\n * obj.addAtHead(val)\n * obj.addAtTail(val)\n * obj.addAtIndex(index, val)\n * obj.deleteAtIndex(index)\n */"},{"value":"kotlin","text":"Kotlin","defaultCode":"class MyLinkedList() {\n\n    fun get(index: Int): Int {\n\n    }\n\n    fun addAtHead(`val`: Int) {\n\n    }\n\n    fun addAtTail(`val`: Int) {\n\n    }\n\n    fun addAtIndex(index: Int, `val`: Int) {\n\n    }\n\n    fun deleteAtIndex(index: Int) {\n\n    }\n\n}\n\n/**\n * Your MyLinkedList object will be instantiated and called as such:\n * var obj = MyLinkedList()\n * var param_1 = obj.get(index)\n * obj.addAtHead(`val`)\n * obj.addAtTail(`val`)\n * obj.addAtIndex(index,`val`)\n * obj.deleteAtIndex(index)\n */"},{"value":"dart","text":"Dart","defaultCode":"class MyLinkedList {\n\n  MyLinkedList() {\n    \n  }\n  \n  int get(int index) {\n    \n  }\n  \n  void addAtHead(int val) {\n    \n  }\n  \n  void addAtTail(int val) {\n    \n  }\n  \n  void addAtIndex(int index, int val) {\n    \n  }\n  \n  void deleteAtIndex(int index) {\n    \n  }\n}\n\n/**\n * Your MyLinkedList object will be instantiated and called as such:\n * MyLinkedList obj = MyLinkedList();\n * int param1 = obj.get(index);\n * obj.addAtHead(val);\n * obj.addAtTail(val);\n * obj.addAtIndex(index,val);\n * obj.deleteAtIndex(index);\n */"},{"value":"golang","text":"Go","defaultCode":"type MyLinkedList struct {\n\n}\n\n\nfunc Constructor() MyLinkedList {\n\n}\n\n\nfunc (this *MyLinkedList) Get(index int) int {\n\n}\n\n\nfunc (this *MyLinkedList) AddAtHead(val int)  {\n\n}\n\n\nfunc (this *MyLinkedList) AddAtTail(val int)  {\n\n}\n\n\nfunc (this *MyLinkedList) AddAtIndex(index int, val int)  {\n\n}\n\n\nfunc (this *MyLinkedList) DeleteAtIndex(index int)  {\n\n}\n\n\n/**\n * Your MyLinkedList object will be instantiated and called as such:\n * obj := Constructor();\n * param_1 := obj.Get(index);\n * obj.AddAtHead(val);\n * obj.AddAtTail(val);\n * obj.AddAtIndex(index,val);\n * obj.DeleteAtIndex(index);\n */"},{"value":"ruby","text":"Ruby","defaultCode":"class MyLinkedList\n    def initialize()\n        \n    end\n\n\n=begin\n    :type index: Integer\n    :rtype: Integer\n=end\n    def get(index)\n        \n    end\n\n\n=begin\n    :type val: Integer\n    :rtype: Void\n=end\n    def add_at_head(val)\n        \n    end\n\n\n=begin\n    :type val: Integer\n    :rtype: Void\n=end\n    def add_at_tail(val)\n        \n    end\n\n\n=begin\n    :type index: Integer\n    :type val: Integer\n    :rtype: Void\n=end\n    def add_at_index(index, val)\n        \n    end\n\n\n=begin\n    :type index: Integer\n    :rtype: Void\n=end\n    def delete_at_index(index)\n        \n    end\n\n\nend\n\n# Your MyLinkedList object will be instantiated and called as such:\n# obj = MyLinkedList.new()\n# param_1 = obj.get(index)\n# obj.add_at_head(val)\n# obj.add_at_tail(val)\n# obj.add_at_index(index, val)\n# obj.delete_at_index(index)"},{"value":"scala","text":"Scala","defaultCode":"class MyLinkedList() {\n\n    def get(index: Int): Int = {\n        \n    }\n\n    def addAtHead(`val`: Int): Unit = {\n        \n    }\n\n    def addAtTail(`val`: Int): Unit = {\n        \n    }\n\n    def addAtIndex(index: Int, `val`: Int): Unit = {\n        \n    }\n\n    def deleteAtIndex(index: Int): Unit = {\n        \n    }\n\n}\n\n/**\n * Your MyLinkedList object will be instantiated and called as such:\n * val obj = new MyLinkedList()\n * val param_1 = obj.get(index)\n * obj.addAtHead(`val`)\n * obj.addAtTail(`val`)\n * obj.addAtIndex(index,`val`)\n * obj.deleteAtIndex(index)\n */"},{"value":"rust","text":"Rust","defaultCode":"struct MyLinkedList {\n\n}\n\n\n/**\n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl MyLinkedList {\n\n    fn new() -> Self {\n\n    }\n    \n    fn get(&self, index: i32) -> i32 {\n\n    }\n    \n    fn add_at_head(&self, val: i32) {\n\n    }\n    \n    fn add_at_tail(&self, val: i32) {\n\n    }\n    \n    fn add_at_index(&self, index: i32, val: i32) {\n\n    }\n    \n    fn delete_at_index(&self, index: i32) {\n\n    }\n}\n\n/**\n * Your MyLinkedList object will be instantiated and called as such:\n * let obj = MyLinkedList::new();\n * let ret_1: i32 = obj.get(index);\n * obj.add_at_head(val);\n * obj.add_at_tail(val);\n * obj.add_at_index(index, val);\n * obj.delete_at_index(index);\n */"},{"value":"racket","text":"Racket","defaultCode":"(define my-linked-list%\n  (class object%\n    (super-new)\n    \n    (init-field)\n    \n    ; get : exact-integer? -> exact-integer?\n    (define/public (get index)\n      )\n    ; add-at-head : exact-integer? -> void?\n    (define/public (add-at-head val)\n      )\n    ; add-at-tail : exact-integer? -> void?\n    (define/public (add-at-tail val)\n      )\n    ; add-at-index : exact-integer? exact-integer? -> void?\n    (define/public (add-at-index index val)\n      )\n    ; delete-at-index : exact-integer? -> void?\n    (define/public (delete-at-index index)\n      )))\n\n;; Your my-linked-list% object will be instantiated and called as such:\n;; (define obj (new my-linked-list%))\n;; (define param_1 (send obj get index))\n;; (send obj add-at-head val)\n;; (send obj add-at-tail val)\n;; (send obj add-at-index index val)\n;; (send obj delete-at-index index)"},{"value":"erlang","text":"Erlang","defaultCode":"-spec my_linked_list_init_() -> any().\nmy_linked_list_init_() ->\n  .\n\n-spec my_linked_list_get(Index :: integer()) -> integer().\nmy_linked_list_get(Index) ->\n  .\n\n-spec my_linked_list_add_at_head(Val :: integer()) -> any().\nmy_linked_list_add_at_head(Val) ->\n  .\n\n-spec my_linked_list_add_at_tail(Val :: integer()) -> any().\nmy_linked_list_add_at_tail(Val) ->\n  .\n\n-spec my_linked_list_add_at_index(Index :: integer(), Val :: integer()) -> any().\nmy_linked_list_add_at_index(Index, Val) ->\n  .\n\n-spec my_linked_list_delete_at_index(Index :: integer()) -> any().\nmy_linked_list_delete_at_index(Index) ->\n  .\n\n\n%% Your functions will be called as such:\n%% my_linked_list_init_(),\n%% Param_1 = my_linked_list_get(Index),\n%% my_linked_list_add_at_head(Val),\n%% my_linked_list_add_at_tail(Val),\n%% my_linked_list_add_at_index(Index, Val),\n%% my_linked_list_delete_at_index(Index),\n\n%% my_linked_list_init_ will be called before every test case, in which you can do some necessary initializations."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule MyLinkedList do\n  @spec init_() :: any\n  def init_() do\n    \n  end\n\n  @spec get(index :: integer) :: integer\n  def get(index) do\n    \n  end\n\n  @spec add_at_head(val :: integer) :: any\n  def add_at_head(val) do\n    \n  end\n\n  @spec add_at_tail(val :: integer) :: any\n  def add_at_tail(val) do\n    \n  end\n\n  @spec add_at_index(index :: integer, val :: integer) :: any\n  def add_at_index(index, val) do\n    \n  end\n\n  @spec delete_at_index(index :: integer) :: any\n  def delete_at_index(index) do\n    \n  end\nend\n\n# Your functions will be called as such:\n# MyLinkedList.init_()\n# param_1 = MyLinkedList.get(index)\n# MyLinkedList.add_at_head(val)\n# MyLinkedList.add_at_tail(val)\n# MyLinkedList.add_at_index(index, val)\n# MyLinkedList.delete_at_index(index)\n\n# MyLinkedList.init_ will be called before every test case, in which you can do some necessary initializations."}],"testcase":"[\"MyLinkedList\",\"addAtHead\",\"addAtTail\",\"addAtIndex\",\"get\",\"deleteAtIndex\",\"get\"]\n[[],[1],[3],[1,2],[1],[1],[1]]","testable":true,"templateMeta":{"classname":"MyLinkedList","constructor":{"params":[]},"methods":[{"params":[{"type":"integer","name":"index"}],"return":{"type":"integer"},"name":"get"},{"params":[{"type":"integer","name":"val"}],"return":{"type":"void"},"name":"addAtHead"},{"params":[{"type":"integer","name":"val"}],"return":{"type":"void"},"name":"addAtTail"},{"params":[{"type":"integer","name":"index"},{"type":"integer","name":"val"}],"return":{"type":"void"},"name":"addAtIndex"},{"params":[{"type":"integer","name":"index"}],"return":{"type":"void"},"name":"deleteAtIndex"}],"return":{"type":"boolean"},"systemdesign":true}}