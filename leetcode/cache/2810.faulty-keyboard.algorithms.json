{"id":2886,"fid":"2810","name":"故障键盘","slug":"faulty-keyboard","link":"https://leetcode.cn/problems/faulty-keyboard/description/","percent":82.09722913555666,"level":"Easy","category":"algorithms","en_name":"Faulty Keyboard","cn_name":"故障键盘","totalAC":"25.3K","totalSubmit":"29.9K","likes":34,"dislikes":0,"desc":"<p>你的笔记本键盘存在故障，每当你在上面输入字符 <code>'i'</code> 时，它会反转你所写的字符串。而输入其他字符则可以正常工作。</p>\n\n<p>给你一个下标从 <strong>0</strong> 开始的字符串 <code>s</code> ，请你用故障键盘依次输入每个字符。</p>\n\n<p>返回最终笔记本屏幕上输出的字符串。</p>\n\n<p>&nbsp;</p>\n\n<p><strong>示例 1：</strong></p>\n\n<pre><strong>输入：</strong>s = \"string\"\n<strong>输出：</strong>\"rtsng\"\n<strong>解释：</strong>\n输入第 1 个字符后，屏幕上的文本是：\"s\" 。\n输入第 2 个字符后，屏幕上的文本是：\"st\" 。\n输入第 3 个字符后，屏幕上的文本是：\"str\" 。\n因为第 4 个字符是 'i' ，屏幕上的文本被反转，变成 \"rts\" 。\n输入第 5 个字符后，屏幕上的文本是：\"rtsn\" 。\n输入第 6 个字符后，屏幕上的文本是： \"rtsng\" 。\n因此，返回 \"rtsng\" 。\n</pre>\n\n<p><strong>示例 2：</strong></p>\n\n<pre><strong>输入：</strong>s = \"poiinter\"\n<strong>输出：</strong>\"ponter\"\n<strong>解释：</strong>\n输入第 1 个字符后，屏幕上的文本是：\"p\" 。\n输入第 2 个字符后，屏幕上的文本是：\"po\" 。\n因为第 3 个字符是 'i' ，屏幕上的文本被反转，变成 \"op\" 。\n因为第 4 个字符是 'i' ，屏幕上的文本被反转，变成 \"po\" 。\n输入第 5 个字符后，屏幕上的文本是：\"pon\" 。\n输入第 6 个字符后，屏幕上的文本是：\"pont\" 。\n输入第 7 个字符后，屏幕上的文本是：\"ponte\" 。\n输入第 8 个字符后，屏幕上的文本是：\"ponter\" 。\n因此，返回 \"ponter\" 。</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 100</code></li>\n\t<li><code>s</code> 由小写英文字母组成</li>\n\t<li><code>s[0] != 'i'</code></li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class Solution {\npublic:\n    string finalString(string s) {\n        \n    }\n};"},{"value":"java","text":"Java","defaultCode":"class Solution {\n    public String finalString(String s) {\n\n    }\n}"},{"value":"python","text":"Python","defaultCode":"class Solution(object):\n    def finalString(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\""},{"value":"python3","text":"Python3","defaultCode":"class Solution:\n    def finalString(self, s: str) -> str:"},{"value":"c","text":"C","defaultCode":"char* finalString(char* s) {\n    \n}"},{"value":"csharp","text":"C#","defaultCode":"public class Solution {\n    public string FinalString(string s) {\n\n    }\n}"},{"value":"javascript","text":"JavaScript","defaultCode":"/**\n * @param {string} s\n * @return {string}\n */\nvar finalString = function(s) {\n\n};"},{"value":"typescript","text":"TypeScript","defaultCode":"function finalString(s: string): string {\n    \n};"},{"value":"php","text":"PHP","defaultCode":"class Solution {\n\n    /**\n     * @param String $s\n     * @return String\n     */\n    function finalString($s) {\n\n    }\n}"},{"value":"swift","text":"Swift","defaultCode":"class Solution {\n    func finalString(_ s: String) -> String {\n\n    }\n}"},{"value":"kotlin","text":"Kotlin","defaultCode":"class Solution {\n    fun finalString(s: String): String {\n\n    }\n}"},{"value":"dart","text":"Dart","defaultCode":"class Solution {\n  String finalString(String s) {\n    \n  }\n}"},{"value":"golang","text":"Go","defaultCode":"func finalString(s string) string {\n\n}"},{"value":"ruby","text":"Ruby","defaultCode":"# @param {String} s\n# @return {String}\ndef final_string(s)\n\nend"},{"value":"scala","text":"Scala","defaultCode":"object Solution {\n    def finalString(s: String): String = {\n\n    }\n}"},{"value":"rust","text":"Rust","defaultCode":"impl Solution {\n    pub fn final_string(s: String) -> String {\n\n    }\n}"},{"value":"racket","text":"Racket","defaultCode":"(define/contract (final-string s)\n  (-> string? string?)\n  )"},{"value":"erlang","text":"Erlang","defaultCode":"-spec final_string(S :: unicode:unicode_binary()) -> unicode:unicode_binary().\nfinal_string(S) ->\n  ."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule Solution do\n  @spec final_string(s :: String.t) :: String.t\n  def final_string(s) do\n    \n  end\nend"}],"testcase":"\"string\"","testable":true,"templateMeta":{"name":"finalString","params":[{"name":"s","type":"string"}],"return":{"type":"string"}}}