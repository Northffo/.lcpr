{"id":817,"fid":"706","name":"设计哈希映射","slug":"design-hashmap","link":"https://leetcode.cn/problems/design-hashmap/description/","percent":63.73616281347962,"level":"Easy","category":"algorithms","en_name":"Design HashMap","cn_name":"设计哈希映射","totalAC":"110.7K","totalSubmit":"171.7K","likes":410,"dislikes":0,"desc":"<p>不使用任何内建的哈希表库设计一个哈希映射（HashMap）。</p>\n\n<p>实现 <code>MyHashMap</code> 类：</p>\n\n<ul>\n\t<li><code>MyHashMap()</code> 用空映射初始化对象</li>\n\t<li><code>void put(int key, int value)</code> 向 HashMap 插入一个键值对 <code>(key, value)</code> 。如果 <code>key</code> 已经存在于映射中，则更新其对应的值 <code>value</code> 。</li>\n\t<li><code>int get(int key)</code> 返回特定的 <code>key</code> 所映射的 <code>value</code> ；如果映射中不包含 <code>key</code> 的映射，返回 <code>-1</code> 。</li>\n\t<li><code>void remove(key)</code> 如果映射中存在 <code>key</code> 的映射，则移除 <code>key</code> 和它所对应的 <code>value</code> 。</li>\n</ul>\n\n<p>&nbsp;</p>\n\n<p><strong>示例：</strong></p>\n\n<pre>\n<strong>输入</strong>：\n[\"MyHashMap\", \"put\", \"put\", \"get\", \"get\", \"put\", \"get\", \"remove\", \"get\"]\n[[], [1, 1], [2, 2], [1], [3], [2, 1], [2], [2], [2]]\n<strong>输出</strong>：\n[null, null, null, 1, -1, null, 1, null, -1]\n\n<strong>解释</strong>：\nMyHashMap myHashMap = new MyHashMap();\nmyHashMap.put(1, 1); // myHashMap 现在为 [[1,1]]\nmyHashMap.put(2, 2); // myHashMap 现在为 [[1,1], [2,2]]\nmyHashMap.get(1);    // 返回 1 ，myHashMap 现在为 [[1,1], [2,2]]\nmyHashMap.get(3);    // 返回 -1（未找到），myHashMap 现在为 [[1,1], [2,2]]\nmyHashMap.put(2, 1); // myHashMap 现在为 [[1,1], [2,1]]（更新已有的值）\nmyHashMap.get(2);    // 返回 1 ，myHashMap 现在为 [[1,1], [2,1]]\nmyHashMap.remove(2); // 删除键为 2 的数据，myHashMap 现在为 [[1,1]]\nmyHashMap.get(2);    // 返回 -1（未找到），myHashMap 现在为 [[1,1]]\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong>提示：</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= key, value &lt;= 10<sup>6</sup></code></li>\n\t<li>最多调用 <code>10<sup>4</sup></code> 次 <code>put</code>、<code>get</code> 和 <code>remove</code> 方法</li>\n</ul>\n","templates":[{"value":"cpp","text":"C++","defaultCode":"class MyHashMap {\npublic:\n    MyHashMap() {\n\n    }\n    \n    void put(int key, int value) {\n\n    }\n    \n    int get(int key) {\n\n    }\n    \n    void remove(int key) {\n\n    }\n};\n\n/**\n * Your MyHashMap object will be instantiated and called as such:\n * MyHashMap* obj = new MyHashMap();\n * obj->put(key,value);\n * int param_2 = obj->get(key);\n * obj->remove(key);\n */"},{"value":"java","text":"Java","defaultCode":"class MyHashMap {\n\n    public MyHashMap() {\n\n    }\n    \n    public void put(int key, int value) {\n\n    }\n    \n    public int get(int key) {\n\n    }\n    \n    public void remove(int key) {\n\n    }\n}\n\n/**\n * Your MyHashMap object will be instantiated and called as such:\n * MyHashMap obj = new MyHashMap();\n * obj.put(key,value);\n * int param_2 = obj.get(key);\n * obj.remove(key);\n */"},{"value":"python","text":"Python","defaultCode":"class MyHashMap(object):\n\n    def __init__(self):\n\n\n    def put(self, key, value):\n        \"\"\"\n        :type key: int\n        :type value: int\n        :rtype: None\n        \"\"\"\n\n\n    def get(self, key):\n        \"\"\"\n        :type key: int\n        :rtype: int\n        \"\"\"\n\n\n    def remove(self, key):\n        \"\"\"\n        :type key: int\n        :rtype: None\n        \"\"\"\n\n\n\n# Your MyHashMap object will be instantiated and called as such:\n# obj = MyHashMap()\n# obj.put(key,value)\n# param_2 = obj.get(key)\n# obj.remove(key)"},{"value":"python3","text":"Python3","defaultCode":"class MyHashMap:\n\n    def __init__(self):\n\n\n    def put(self, key: int, value: int) -> None:\n\n\n    def get(self, key: int) -> int:\n\n\n    def remove(self, key: int) -> None:\n\n\n\n# Your MyHashMap object will be instantiated and called as such:\n# obj = MyHashMap()\n# obj.put(key,value)\n# param_2 = obj.get(key)\n# obj.remove(key)"},{"value":"c","text":"C","defaultCode":"\n\n\ntypedef struct {\n    \n} MyHashMap;\n\n\nMyHashMap* myHashMapCreate() {\n    \n}\n\nvoid myHashMapPut(MyHashMap* obj, int key, int value) {\n  \n}\n\nint myHashMapGet(MyHashMap* obj, int key) {\n  \n}\n\nvoid myHashMapRemove(MyHashMap* obj, int key) {\n  \n}\n\nvoid myHashMapFree(MyHashMap* obj) {\n    \n}\n\n/**\n * Your MyHashMap struct will be instantiated and called as such:\n * MyHashMap* obj = myHashMapCreate();\n * myHashMapPut(obj, key, value);\n \n * int param_2 = myHashMapGet(obj, key);\n \n * myHashMapRemove(obj, key);\n \n * myHashMapFree(obj);\n*/"},{"value":"csharp","text":"C#","defaultCode":"public class MyHashMap {\n\n    public MyHashMap() {\n\n    }\n    \n    public void Put(int key, int value) {\n\n    }\n    \n    public int Get(int key) {\n\n    }\n    \n    public void Remove(int key) {\n\n    }\n}\n\n/**\n * Your MyHashMap object will be instantiated and called as such:\n * MyHashMap obj = new MyHashMap();\n * obj.Put(key,value);\n * int param_2 = obj.Get(key);\n * obj.Remove(key);\n */"},{"value":"javascript","text":"JavaScript","defaultCode":"\nvar MyHashMap = function() {\n\n};\n\n/** \n * @param {number} key \n * @param {number} value\n * @return {void}\n */\nMyHashMap.prototype.put = function(key, value) {\n\n};\n\n/** \n * @param {number} key\n * @return {number}\n */\nMyHashMap.prototype.get = function(key) {\n\n};\n\n/** \n * @param {number} key\n * @return {void}\n */\nMyHashMap.prototype.remove = function(key) {\n\n};\n\n/**\n * Your MyHashMap object will be instantiated and called as such:\n * var obj = new MyHashMap()\n * obj.put(key,value)\n * var param_2 = obj.get(key)\n * obj.remove(key)\n */"},{"value":"typescript","text":"TypeScript","defaultCode":"class MyHashMap {\n    constructor() {\n\n    }\n\n    put(key: number, value: number): void {\n\n    }\n\n    get(key: number): number {\n\n    }\n\n    remove(key: number): void {\n\n    }\n}\n\n/**\n * Your MyHashMap object will be instantiated and called as such:\n * var obj = new MyHashMap()\n * obj.put(key,value)\n * var param_2 = obj.get(key)\n * obj.remove(key)\n */"},{"value":"php","text":"PHP","defaultCode":"class MyHashMap {\n    /**\n     */\n    function __construct() {\n\n    }\n\n    /**\n     * @param Integer $key\n     * @param Integer $value\n     * @return NULL\n     */\n    function put($key, $value) {\n\n    }\n\n    /**\n     * @param Integer $key\n     * @return Integer\n     */\n    function get($key) {\n\n    }\n\n    /**\n     * @param Integer $key\n     * @return NULL\n     */\n    function remove($key) {\n\n    }\n}\n\n/**\n * Your MyHashMap object will be instantiated and called as such:\n * $obj = MyHashMap();\n * $obj->put($key, $value);\n * $ret_2 = $obj->get($key);\n * $obj->remove($key);\n */"},{"value":"swift","text":"Swift","defaultCode":"\nclass MyHashMap {\n\n    init() {\n\n    }\n    \n    func put(_ key: Int, _ value: Int) {\n\n    }\n    \n    func get(_ key: Int) -> Int {\n\n    }\n    \n    func remove(_ key: Int) {\n\n    }\n}\n\n/**\n * Your MyHashMap object will be instantiated and called as such:\n * let obj = MyHashMap()\n * obj.put(key, value)\n * let ret_2: Int = obj.get(key)\n * obj.remove(key)\n */"},{"value":"kotlin","text":"Kotlin","defaultCode":"class MyHashMap() {\n\n    fun put(key: Int, value: Int) {\n\n    }\n\n    fun get(key: Int): Int {\n\n    }\n\n    fun remove(key: Int) {\n\n    }\n\n}\n\n/**\n * Your MyHashMap object will be instantiated and called as such:\n * var obj = MyHashMap()\n * obj.put(key,value)\n * var param_2 = obj.get(key)\n * obj.remove(key)\n */"},{"value":"dart","text":"Dart","defaultCode":"class MyHashMap {\n\n  MyHashMap() {\n\n  }\n  \n  void put(int key, int value) {\n\n  }\n  \n  int get(int key) {\n\n  }\n  \n  void remove(int key) {\n\n  }\n}\n\n/**\n * Your MyHashMap object will be instantiated and called as such:\n * MyHashMap obj = MyHashMap();\n * obj.put(key,value);\n * int param2 = obj.get(key);\n * obj.remove(key);\n */"},{"value":"golang","text":"Go","defaultCode":"type MyHashMap struct {\n\n}\n\n\nfunc Constructor() MyHashMap {\n\n}\n\n\nfunc (this *MyHashMap) Put(key int, value int)  {\n\n}\n\n\nfunc (this *MyHashMap) Get(key int) int {\n\n}\n\n\nfunc (this *MyHashMap) Remove(key int)  {\n\n}\n\n\n/**\n * Your MyHashMap object will be instantiated and called as such:\n * obj := Constructor();\n * obj.Put(key,value);\n * param_2 := obj.Get(key);\n * obj.Remove(key);\n */"},{"value":"ruby","text":"Ruby","defaultCode":"class MyHashMap\n    def initialize()\n\n    end\n\n\n=begin\n    :type key: Integer\n    :type value: Integer\n    :rtype: Void\n=end\n    def put(key, value)\n\n    end\n\n\n=begin\n    :type key: Integer\n    :rtype: Integer\n=end\n    def get(key)\n\n    end\n\n\n=begin\n    :type key: Integer\n    :rtype: Void\n=end\n    def remove(key)\n\n    end\n\n\nend\n\n# Your MyHashMap object will be instantiated and called as such:\n# obj = MyHashMap.new()\n# obj.put(key, value)\n# param_2 = obj.get(key)\n# obj.remove(key)"},{"value":"scala","text":"Scala","defaultCode":"class MyHashMap() {\n\n    def put(key: Int, value: Int) {\n\n    }\n\n    def get(key: Int): Int = {\n\n    }\n\n    def remove(key: Int) {\n\n    }\n\n}\n\n/**\n * Your MyHashMap object will be instantiated and called as such:\n * var obj = new MyHashMap()\n * obj.put(key,value)\n * var param_2 = obj.get(key)\n * obj.remove(key)\n */"},{"value":"rust","text":"Rust","defaultCode":"struct MyHashMap {\n\n}\n\n\n/**\n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl MyHashMap {\n\n    fn new() -> Self {\n\n    }\n    \n    fn put(&self, key: i32, value: i32) {\n\n    }\n    \n    fn get(&self, key: i32) -> i32 {\n\n    }\n    \n    fn remove(&self, key: i32) {\n\n    }\n}\n\n/**\n * Your MyHashMap object will be instantiated and called as such:\n * let obj = MyHashMap::new();\n * obj.put(key, value);\n * let ret_2: i32 = obj.get(key);\n * obj.remove(key);\n */"},{"value":"racket","text":"Racket","defaultCode":"(define my-hash-map%\n  (class object%\n    (super-new)\n    (init-field)\n    \n    ; put : exact-integer? exact-integer? -> void?\n    (define/public (put key value)\n\n      )\n    ; get : exact-integer? -> exact-integer?\n    (define/public (get key)\n\n      )\n    ; remove : exact-integer? -> void?\n    (define/public (remove key)\n\n      )))\n\n;; Your my-hash-map% object will be instantiated and called as such:\n;; (define obj (new my-hash-map%))\n;; (send obj put key value)\n;; (define param_2 (send obj get key))\n;; (send obj remove key)"},{"value":"erlang","text":"Erlang","defaultCode":"-spec my_hash_map_init_() -> any().\nmy_hash_map_init_() ->\n  .\n\n-spec my_hash_map_put(Key :: integer(), Value :: integer()) -> any().\nmy_hash_map_put(Key, Value) ->\n  .\n\n-spec my_hash_map_get(Key :: integer()) -> integer().\nmy_hash_map_get(Key) ->\n  .\n\n-spec my_hash_map_remove(Key :: integer()) -> any().\nmy_hash_map_remove(Key) ->\n  .\n\n\n%% Your functions will be called as such:\n%% my_hash_map_init_(),\n%% my_hash_map_put(Key, Value),\n%% Param_2 = my_hash_map_get(Key),\n%% my_hash_map_remove(Key),\n\n%% my_hash_map_init_ will be called before every test case, in which you can do some necessary initializations."},{"value":"elixir","text":"Elixir","defaultCode":"defmodule MyHashMap do\n  @spec init_() :: any\n  def init_() do\n\n  end\n\n  @spec put(key :: integer, value :: integer) :: any\n  def put(key, value) do\n\n  end\n\n  @spec get(key :: integer) :: integer\n  def get(key) do\n\n  end\n\n  @spec remove(key :: integer) :: any\n  def remove(key) do\n\n  end\nend\n\n# Your functions will be called as such:\n# MyHashMap.init_()\n# MyHashMap.put(key, value)\n# param_2 = MyHashMap.get(key)\n# MyHashMap.remove(key)\n\n# MyHashMap.init_ will be called before every test case, in which you can do some necessary initializations."}],"testcase":"[\"MyHashMap\",\"put\",\"put\",\"get\",\"get\",\"put\",\"get\",\"remove\",\"get\"]\n[[],[1,1],[2,2],[1],[3],[2,1],[2],[2],[2]]","testable":true,"templateMeta":{"classname":"MyHashMap","constructor":{"params":[]},"methods":[{"params":[{"type":"integer","name":"key"},{"type":"integer","name":"value"}],"return":{"type":"void"},"name":"put"},{"params":[{"type":"integer","name":"key"}],"return":{"type":"integer"},"name":"get"},{"params":[{"type":"integer","name":"key"}],"return":{"type":"void"},"name":"remove"}],"return":{"type":"boolean"},"systemdesign":true}}